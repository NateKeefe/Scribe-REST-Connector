{
  "swagger": "2.0",
  "info": {
    "version": "2",
    "title": "Scribe Swagger API"
  },
  "host": "api.scribesoft.com",
  "basePath": "/",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  },
  "security": [
    {
      "basicAuth": []
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/orgs/{orgId}/agents": {
      "get": {
        "description": "Return a list of Agents",
        "summary": "Agents_GetAgents",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectorId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of a Connector installed in an Agent."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of an Agent."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "The number of Agents to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Agents. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AgentModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/agents/{agentId}/logs": {
      "post": {
        "description": "Capture Agent Logs",
        "summary": "Agents_CaptureAgentLogs",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsLogsByOrgIdAndAgentIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Agent."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/agents/{agentId}/logs/{logId}": {
      "get": {
        "description": "Return Agent Logs",
        "summary": "Agents_GetAgentLogs",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsLogsLogIdByOrgIdAndAgentIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Agent."
          },
          {
            "name": "logId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the log request."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/agents/{agentId}/restart": {
      "post": {
        "description": "Restart an Agent",
        "summary": "Agents_RestartAgent",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsRestartByOrgIdAndAgentIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "agentId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Agent."
          },
          {
            "name": "restartNow",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to restart now, interrupting running Solutions or false to wait until Solutions finish. Default is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/agents/{id}": {
      "get": {
        "description": "Return information about an Agent",
        "summary": "Agents_GetAgent",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsByOrgIdAndIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Agent."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AgentModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify an Agent",
        "summary": "Agents_UpdateAgent",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsByOrgIdAndIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Agent."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Agent.\r\n                Required: Name",
            "schema": {
              "$ref": "#/definitions/AgentModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AgentModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete an Agent",
        "summary": "Agents_DeleteAgent",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsByOrgIdAndIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Agent."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/agents/provision_cloud_agent": {
      "post": {
        "description": "Provision a Cloud Agent",
        "summary": "Agents_ProvisionCloudAgent",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsProvisionCloudAgentByOrgIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/agents/provision_onpremise_agent": {
      "post": {
        "description": "Return installation information for an On-Premise Agent",
        "summary": "Agents_ProvisionOnPremiseAgent",
        "tags": [
          "Agents"
        ],
        "operationId": "V1OrgsAgentsProvisionOnpremiseAgentByOrgIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ProvisionOnPremiseAgentModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/commands/start": {
      "post": {
        "description": "Start a Solution (deprecated)",
        "summary": "Commands_Start",
        "tags": [
          "Commands"
        ],
        "operationId": "V1OrgsSolutionsCommandsStartByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/commands/stop": {
      "post": {
        "description": "Stop a Solution (deprecated)",
        "summary": "Commands_Stop",
        "tags": [
          "Commands"
        ],
        "operationId": "V1OrgsSolutionsCommandsStopByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections": {
      "get": {
        "description": "Return a list of supported Connections",
        "summary": "Connections_GetConnections",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of the Connection."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Connections to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Connections. Default value is 100."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Setting to return Connection properties. Default value is true."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter for Connections supported by this Agent."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectionModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a Connection",
        "summary": "Connections_CreateConnection",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsByOrgIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Connection.\r\n                Required: Name, ConnectorId, and Color (in hexadecimal ARGB format)",
            "schema": {
              "$ref": "#/definitions/ConnectionModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}": {
      "get": {
        "description": "Return information about a Connection",
        "summary": "Connections_GetConnection",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsByOrgIdAndConnectionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify a Connection",
        "summary": "Connections_UpdateConnection",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsByOrgIdAndConnectionIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Connection.",
            "schema": {
              "$ref": "#/definitions/ConnectionModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a Connection",
        "summary": "Connections_DeleteConnection",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsByOrgIdAndConnectionIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/actions": {
      "get": {
        "description": "Return a list of Actions for a Connection",
        "summary": "Connections_GetConnectionActions",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsActionsByOrgIdAndConnectionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Agent to request Actions from if not found."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Actions to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Actions. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ActionModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/entities": {
      "get": {
        "description": "Return a list of Entities for a Connection",
        "summary": "Connections_GetEntitiesForConnection",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsEntitiesByOrgIdAndConnectionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Agent to load the metadata, if necessary."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Return the Actions with the Entity. Default is false."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Entities to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Entities. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntityModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/entities/{entityIdOrName}": {
      "get": {
        "description": "Return information about an Entity",
        "summary": "Connections_GetEntity",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsEntitiesEntityIdOrNameByOrgIdAndConnectionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "entityIdOrName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID or name of the Entity."
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Include Actions for this Entity.  Default is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/EntityModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/entities/{entityIdOrName}/fields": {
      "get": {
        "description": "Return a list of Fields for an Entity",
        "summary": "Connections_GetEntityFields",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsEntitiesEntityIdOrNameFieldsByOrgIdAndConnectionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "entityIdOrName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID or name of the Entity."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Agent to load the metadata, if necessary."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Fields to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Fields. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PropertyModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/entities/{entityIdOrName}/relationships": {
      "get": {
        "description": "Return a list of Relationships for an Entity",
        "summary": "Connections_GetEntityRelationships",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsEntitiesEntityIdOrNameRelationshipsByOrgIdAndConnectionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "entityIdOrName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID or name of the Entity."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Agent to load the metadata, if necessary."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Relationships to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Relationships. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationshipModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/entitynames": {
      "get": {
        "description": "Return a list of Entity names for a Connection",
        "summary": "Connections_GetEntityNamesForConnection",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsEntitynamesByOrgIdAndConnectionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Agent to load the metadata, if necessary."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Entity names to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Entity names. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/reset": {
      "post": {
        "description": "Reset the metadata for a Connection",
        "summary": "Connections_ResetMetadata",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsResetByOrgIdAndConnectionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/supportedactions": {
      "get": {
        "description": "Return a list of supported Actions for a Connection",
        "summary": "Connections_GetConnectionSupportedOperationsByCategory",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsSupportedactionsByOrgIdAndConnectionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "mapType",
            "in": "query",
            "required": true,
            "enum": [
              "ReplicationServicesMap",
              "IntegrationServicesBasicMap",
              "IntegrationServicesAdvancedMap",
              "IntegrationServicesAdvancedRequestResponseMap",
              "IntegrationServicesAdvancedMessageMap",
              "IntegrationServicesSysControllerMap"
            ],
            "x-enum-elements": [
              {
                "name": "ReplicationServicesMap",
                "description": ""
              },
              {
                "name": "IntegrationServicesBasicMap",
                "description": ""
              },
              {
                "name": "IntegrationServicesAdvancedMap",
                "description": ""
              },
              {
                "name": "IntegrationServicesAdvancedRequestResponseMap",
                "description": ""
              },
              {
                "name": "IntegrationServicesAdvancedMessageMap",
                "description": ""
              },
              {
                "name": "IntegrationServicesSysControllerMap",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Map type."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Agent to load the metadata, if necessary."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperationModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/{connectionId}/test": {
      "post": {
        "description": "Test an existing Connection",
        "summary": "Connections_Test",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsTestByOrgIdAndConnectionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "ID of the Agent."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CommandModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/test": {
      "post": {
        "description": "Test Connection properties",
        "summary": "Connections_Test",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsTestByOrgIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "ID of the Agent."
          },
          {
            "name": "connectionModel",
            "in": "body",
            "required": true,
            "description": "Model of the unsaved Connection being tested. Id is not required.",
            "schema": {
              "$ref": "#/definitions/ConnectionModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CommandModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connections/test/{commandId}": {
      "get": {
        "description": "Return the status of a Connection test command",
        "summary": "Connections_Test",
        "tags": [
          "Connections"
        ],
        "operationId": "V1OrgsConnectionsTestByOrgIdAndCommandIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "commandId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the command returned by a Connection's POST Test call."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExtendedCommandModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connectors": {
      "get": {
        "description": "Return a list of Connectors",
        "summary": "Connectors_GetByOrg",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of the Connector."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Connectors to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Connectors. Default value is 100."
          },
          {
            "name": "AgentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter for installed Connectors supported by this Agent."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ConnectorModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connectors/{connectorId}/preconnect": {
      "post": {
        "description": "Setup call for a Connection to be created",
        "summary": "Connectors_Preconnect",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsPreconnectByOrgIdAndConnectorIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connection."
          },
          {
            "name": "properties",
            "in": "body",
            "required": true,
            "description": "Model for the properties the Connector uses for preconnect.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KeyValueModel"
              }
            }
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Agent to use."
          },
          {
            "name": "isOauth",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "For hybrid UI, change to support OAuth."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CommandModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connectors/{connectorId}/preconnect/{commandId}": {
      "get": {
        "description": "Return the status of a preconnect command",
        "summary": "Connectors_GetPreconnectResults",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsPreconnectCommandIdByOrgIdAndConnectorIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connector."
          },
          {
            "name": "commandId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the command returned by a Connection's POST Test call."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CommandModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connectors/{connectorId}/version": {
      "get": {
        "description": "Return version information for a Connector.",
        "summary": "Connectors_GetConnectorVersion",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsVersionByOrgIdAndConnectorIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connector."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorUpdatesModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify Connector version Locked/Unlocked state",
        "summary": "Connectors_UpdateConnectorVersion",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsVersionByOrgIdAndConnectorIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connector."
          },
          {
            "name": "updateVersion",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Version of the connector to lock/unlock."
          },
          {
            "name": "isLocked",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "Set to true to lock or false to unlock."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connectors/{id}": {
      "get": {
        "description": "Return information about a Connector",
        "summary": "Connectors_InstGetById",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsByOrgIdAndIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connector."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connectors/{id}/delete": {
      "delete": {
        "description": "Uninstall a Marketplace Connector from all Agents",
        "summary": "Connectors_UninstallConnector",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsDeleteByOrgIdAndIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connector."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connectors/{id}/install": {
      "post": {
        "description": "Install a Connector to all Agents",
        "summary": "Connectors_InstallConnector",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsInstallByOrgIdAndIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connector."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/connectors/{id}/uioptions": {
      "get": {
        "description": "Return UI options for a Connector",
        "summary": "Connectors_getConnectoruioptions",
        "tags": [
          "Connectors"
        ],
        "operationId": "V1OrgsConnectorsUioptionsByOrgIdAndIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Connector."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Return the UI from this Agent."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Version of the Connector to return, if not the latest."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorUIModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/managedconnectors/{connectorId}/customers": {
      "get": {
        "description": "Return a list of Customer Organizations with access to a Managed Connector",
        "summary": "Customers_GetConnectorCustomers",
        "tags": [
          "Customers"
        ],
        "operationId": "V1OrgsManagedconnectorsCustomersByOrgIdAndConnectorIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Managing Organization."
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Managed Connector."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Customer Organizations to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Customer Organizations. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorCustomerModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/managedconnectors/{connectorId}/customers/{id}": {
      "post": {
        "description": "Grant a Customer Organization access to a Managed Connector",
        "summary": "Customers_AddCustomer",
        "tags": [
          "Customers"
        ],
        "operationId": "V1OrgsManagedconnectorsCustomersIdByOrgIdAndConnectorIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Managing Organization."
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Managed Connector."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Customer Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ConnectorCustomerModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a Customer Organization's access to a Managed Connector",
        "summary": "Customers_RemoveCustomer",
        "tags": [
          "Customers"
        ],
        "operationId": "V1OrgsManagedconnectorsCustomersIdByOrgIdAndConnectorIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Managing Organization."
          },
          {
            "name": "connectorId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Managed Connector."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Customer Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{historyId}/errors": {
      "get": {
        "description": "Return a list of Errors from a Solution execution",
        "summary": "Errors_GetErrors",
        "tags": [
          "Errors"
        ],
        "operationId": "V1OrgsSolutionsHistoryHistoryIdErrorsByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "historyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Errors to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Errors. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionHistoryErrorModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{historyId}/errors/{id}": {
      "get": {
        "description": "Return information about an Error from a Solution execution",
        "summary": "Errors_GetError",
        "tags": [
          "Errors"
        ],
        "operationId": "V1OrgsSolutionsHistoryHistoryIdErrorsIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "historyId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution execution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Error."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutionHistoryErrorModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{historyId}/errors/{id}/mark": {
      "post": {
        "description": "Mark an Error from a Solution execution for reprocessing",
        "summary": "Errors_MarkForReprocess",
        "tags": [
          "Errors"
        ],
        "operationId": "V1OrgsSolutionsHistoryHistoryIdErrorsIdMarkByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "historyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Error."
          },
          {
            "name": "mark",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set or clear the reprocess flag for failed records. Default is true."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{historyId}/failedrecords/{id}": {
      "get": {
        "description": "Return information about the failed source record for an Error from a Solution execution",
        "summary": "FailedRecords_GetFailedRecords",
        "tags": [
          "FailedRecords"
        ],
        "operationId": "V1OrgsSolutionsHistoryHistoryIdFailedrecordsIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "historyId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Error."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/FailedRecord"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history": {
      "get": {
        "description": "Return a list of Solution executions",
        "summary": "History_GetHistory",
        "tags": [
          "History"
        ],
        "operationId": "V1OrgsSolutionsHistoryByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "laterThanDate",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter for Solution executions for this date and later."
          },
          {
            "name": "result",
            "in": "query",
            "required": false,
            "enum": [
              "CompletedSuccessfully",
              "FatalError",
              "CompletedWithErrors",
              "InProgress",
              "RecordErrorsAndFatalErrors"
            ],
            "x-enum-elements": [
              {
                "name": "CompletedSuccessfully",
                "description": ""
              },
              {
                "name": "FatalError",
                "description": ""
              },
              {
                "name": "CompletedWithErrors",
                "description": ""
              },
              {
                "name": "InProgress",
                "description": ""
              },
              {
                "name": "RecordErrorsAndFatalErrors",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter based on the result of the execution."
          },
          {
            "name": "executionHistoryColumnSort",
            "in": "query",
            "required": false,
            "enum": [
              "Start",
              "Result",
              "RecordsProcessed",
              "RecordsFailed"
            ],
            "x-enum-elements": [
              {
                "name": "Start",
                "description": ""
              },
              {
                "name": "Result",
                "description": ""
              },
              {
                "name": "RecordsProcessed",
                "description": ""
              },
              {
                "name": "RecordsFailed",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sort returned data set by selected item."
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "x-enum-elements": [
              {
                "name": "asc",
                "description": ""
              },
              {
                "name": "desc",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sort ascending or descending. Default is ascending."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Solution executions to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Solution executions. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecutionHistoryModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{id}": {
      "get": {
        "description": "Return information about a Solution execution",
        "summary": "History_GetHistory",
        "tags": [
          "History"
        ],
        "operationId": "V1OrgsSolutionsHistoryIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutionHistoryModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{id}/export": {
      "post": {
        "description": "Export Execution History for a Solution execution",
        "summary": "History_ExportHistory",
        "tags": [
          "History"
        ],
        "operationId": "V1OrgsSolutionsHistoryIdExportByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{id}/export/{exportId}": {
      "get": {
        "description": "Return exported Execution History",
        "summary": "History_RetrieveExportedHistory",
        "tags": [
          "History"
        ],
        "operationId": "V1OrgsSolutionsHistoryIdExportExportIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          },
          {
            "name": "exportId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the export request."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{id}/mark": {
      "post": {
        "description": "Mark all Errors from a Solution execution for reprocessing",
        "summary": "History_MarkForReprocess",
        "tags": [
          "History"
        ],
        "operationId": "V1OrgsSolutionsHistoryIdMarkByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          },
          {
            "name": "mark",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set or clear the reprocess flag for failed records. Default is true."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{id}/reprocess": {
      "post": {
        "description": "Reprocess all marked Errors from a Solution execution",
        "summary": "History_ReprocessHistory",
        "tags": [
          "History"
        ],
        "operationId": "V1OrgsSolutionsHistoryIdReprocessByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/history/{id}/statistics": {
      "get": {
        "description": "Return statistics for a Solution execution",
        "summary": "History_GetHistoryStatistics",
        "tags": [
          "History"
        ],
        "operationId": "V1OrgsSolutionsHistoryIdStatisticsByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Solution execution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutionHistoryStatisticsModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/invitedusers": {
      "get": {
        "description": "Return a list of invited Users",
        "summary": "InvitedUsers_Get",
        "tags": [
          "InvitedUsers"
        ],
        "operationId": "V1OrgsInvitedusersByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InvitedUserModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Invite a User",
        "summary": "InvitedUsers_Post",
        "tags": [
          "InvitedUsers"
        ],
        "operationId": "V1OrgsInvitedusersByOrgIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the invited User.\r\n                Required: Email, Status, and Role",
            "schema": {
              "$ref": "#/definitions/InvitedUserModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitedUserModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete an invited User",
        "summary": "InvitedUsers_Delete",
        "tags": [
          "InvitedUsers"
        ],
        "operationId": "V1OrgsInvitedusersByOrgIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Email of the invited User."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/invitedusers/{email}": {
      "get": {
        "description": "Return information about an invited User",
        "summary": "InvitedUsers_Get",
        "tags": [
          "InvitedUsers"
        ],
        "operationId": "V1OrgsInvitedusersByOrgIdAndEmailGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Email of the invited User."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitedUserModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify an invited User",
        "summary": "InvitedUsers_Put",
        "tags": [
          "InvitedUsers"
        ],
        "operationId": "V1OrgsInvitedusersByOrgIdAndEmailPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Email of the invited User."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the invited User. Required: Email, Status, and Role.",
            "schema": {
              "$ref": "#/definitions/InvitedUserModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/InvitedUserModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables": {
      "get": {
        "description": "Return a list of Lookup Tables",
        "summary": "LookupTables_GetLookupTables",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "includeLookupTableValues",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to return Lookup Table Values.\r\n                Default value is false."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Lookup Tables to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Lookup Tables. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LookupTableModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a Lookup Table",
        "summary": "LookupTables_CreateLookupTable",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesByOrgIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Lookup Table.",
            "schema": {
              "$ref": "#/definitions/LookupTableModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LookupTableModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables/{tableId}": {
      "get": {
        "description": "Return information about a Lookup Table",
        "summary": "LookupTables_GetLookupTable",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesByOrgIdAndTableIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "includeLookupTableValues",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to return Lookup Table Values. Default value is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify a Lookup Table",
        "summary": "LookupTables_UpdateLookupTable",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesByOrgIdAndTableIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Lookup Table.",
            "schema": {
              "$ref": "#/definitions/LookupTableModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LookupTableModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a Lookup Table",
        "summary": "LookupTables_DeleteLookupTable",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesByOrgIdAndTableIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables/{tableId}/export": {
      "get": {
        "description": "Export a Lookup Table",
        "summary": "LookupTables_ExportLookupTable",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesExportByOrgIdAndTableIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables/{tableId}/export/{exportId}": {
      "get": {
        "description": "Return exported Lookup Table",
        "summary": "LookupTables_RetrieveExportedLookupTable",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesExportExportIdByOrgIdAndTableIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "exportId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the export request."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables/{tableId}/import": {
      "post": {
        "description": "Import a CSV file into a Lookup Table",
        "summary": "LookupTables_ImportLookupTableContentCsv",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesImportByOrgIdAndTableIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "commaSeparatedValues",
            "in": "body",
            "required": true,
            "description": "Lookup Table values. Requires text/csv format, not JSON.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hasHeaderRow",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true if first row of comma separated values is column headings. Default value is true."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables/{tableId}/values": {
      "get": {
        "description": "Return a list of Lookup Table Values",
        "summary": "LookupTables_GetLookupTableValues",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesValuesByOrgIdAndTableIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Lookup Table Values to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Lookup Table Values. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LookupTableValueModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a Lookup Table Value",
        "summary": "LookupTables_CreateLookupTableValue",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesValuesByOrgIdAndTableIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Lookup Table Value.",
            "schema": {
              "$ref": "#/definitions/LookupTableValueModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LookupTableValueModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables/{tableId}/values/{valueId}": {
      "get": {
        "description": "Return information about a Lookup Table Value",
        "summary": "LookupTables_GetLookupTableValue",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesValuesValueIdByOrgIdAndTableIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "valueId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table Value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify a Lookup Table Value",
        "summary": "LookupTables_UpdateLookupTableValue",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesValuesValueIdByOrgIdAndTableIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "valueId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table Value."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Lookup Table Value.",
            "schema": {
              "$ref": "#/definitions/LookupTableValueModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/LookupTableValueModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a Lookup Table Value",
        "summary": "LookupTables_DeleteLookupTableValue",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesValuesValueIdByOrgIdAndTableIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table."
          },
          {
            "name": "valueId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Lookup Table Value."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables/{tableIdOrName}/values/value1/{value2}": {
      "get": {
        "description": "Return Lookup Table Value1 based on Lookup Table Value2",
        "summary": "LookupTables_GetLookupTableValueValue1",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesValuesValue1Value2ByOrgIdAndTableIdOrNameGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableIdOrName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID or Name of the Lookup Table."
          },
          {
            "name": "value2",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Value of Lookup Table Value2."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/lookuptables/{tableIdOrName}/values/value2/{value1}": {
      "get": {
        "description": "Return Lookup Table Value2 based on Lookup Table Value1",
        "summary": "LookupTables_GetLookupTableValueValue2",
        "tags": [
          "LookupTables"
        ],
        "operationId": "V1OrgsLookuptablesValuesValue2Value1ByOrgIdAndTableIdOrNameGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "tableIdOrName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID or Name of the Lookup Table."
          },
          {
            "name": "value1",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Value of Lookup Table Value1."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/managedconnectors": {
      "get": {
        "description": "Return a list of Managed Connectors",
        "summary": "ManagedConnectors_GetByOrg",
        "tags": [
          "ManagedConnectors"
        ],
        "operationId": "V1OrgsManagedconnectorsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "showCustomers",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to return customer Organizations using the Connector.\r\n                Default value is false."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of the Managed Connector."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Managed Connectors to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Managed Connectors. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ManagedConnectorModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/managedconnectors/{id}": {
      "get": {
        "description": "Return information about a Managed Connector",
        "summary": "ManagedConnectors_GetById",
        "tags": [
          "ManagedConnectors"
        ],
        "operationId": "V1OrgsManagedconnectorsByOrgIdAndIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Managed Connector."
          },
          {
            "name": "showCustomers",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to return customer Organizations using the Connector.\r\n                Default value is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ManagedConnectorModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solution/{solutionId}/maps/advanced/upgrade": {
      "post": {
        "description": "Upgrade and return a submitted Map.",
        "summary": "Maps_UpgradeMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionMapsAdvancedUpgradeByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model of the Map.",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maplinks/{mapId}": {
      "get": {
        "description": "Return a Map link",
        "summary": "Maps_GetMapLinkById",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMaplinksMapIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Map link."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapLinkModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps": {
      "get": {
        "description": "Return a list of Maps",
        "summary": "Maps_GetMaps",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of the Map."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Maps to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Maps. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}": {
      "get": {
        "description": "Return information about a Map",
        "summary": "Maps_GetMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "lockMap",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to return Map in a locked state or false to return Map without locking it."
          },
          {
            "name": "revision",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Revision number of the Map."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapModelBase"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a Map",
        "summary": "Maps_DeleteMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdByOrgIdAndSolutionIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/changeblocktype": {
      "post": {
        "description": "Modify Block type",
        "summary": "Maps_ChangeBlockType",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdChangeblocktypeByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "blockId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "ID of the Block."
          },
          {
            "name": "action",
            "in": "query",
            "required": true,
            "enum": [
              "None",
              "Create",
              "InsertUpdate",
              "UpdateInsert",
              "Query",
              "Update",
              "Delete",
              "NativeQuery",
              "CreateWith",
              "UpdateWith"
            ],
            "x-enum-elements": [
              {
                "name": "None",
                "description": ""
              },
              {
                "name": "Create",
                "description": ""
              },
              {
                "name": "InsertUpdate",
                "description": ""
              },
              {
                "name": "UpdateInsert",
                "description": ""
              },
              {
                "name": "Query",
                "description": ""
              },
              {
                "name": "Update",
                "description": ""
              },
              {
                "name": "Delete",
                "description": ""
              },
              {
                "name": "NativeQuery",
                "description": ""
              },
              {
                "name": "CreateWith",
                "description": ""
              },
              {
                "name": "UpdateWith",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Known action type."
          },
          {
            "name": "operationName",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Name of operation."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model of the Map.",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapModelBase"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/clone": {
      "post": {
        "description": "Copy a Map within a Solution",
        "summary": "Maps_CloneMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdCloneByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the source Map."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/enable": {
      "put": {
        "description": "Modify Map Enabled/Disabled state",
        "summary": "Maps_EnableDisableMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdEnableByOrgIdAndSolutionIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "enableState",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "Set to true to enable or false to disable Map."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapLinkModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/eventinfo": {
      "get": {
        "description": "Return information about an Event Map",
        "summary": "Maps_GetMapEventInfo",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdEventinfoByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapEventInfo"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/lock": {
      "put": {
        "description": "Modify Map Locked/Unlocked state",
        "summary": "Maps_LockMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdLockByOrgIdAndSolutionIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "lockState",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "Set to true to lock or false to unlock Map."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapLinkModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/nativequerytest": {
      "get": {
        "description": "Return the results of a Native Query Block test",
        "summary": "Maps_GetNativeQueryResults",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdNativequerytestByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "nativeQueryBlockId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Native Query Block."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/NativeQueryResultModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Test Native Query Block properties",
        "summary": "Maps_NativeQueryTest",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdNativequerytestByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Block.",
            "schema": {
              "$ref": "#/definitions/NativeQueryTestModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/previewquery": {
      "post": {
        "description": "Run Query preview",
        "summary": "Maps_PreviewQuery",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdPreviewqueryByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Map.",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            }
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Fetch Block. If blank, Query preview results are returned."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/previewquery/{previewId}": {
      "get": {
        "description": "Return Query preview results",
        "summary": "Maps_GetPreviewQueryResults",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdPreviewqueryPreviewIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "previewId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The previewId returned from the Query preview."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/relationships": {
      "get": {
        "description": "Return a list of Relationships for a Map",
        "summary": "Maps_GetRelationships",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdRelationshipsByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "blockId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Block."
          },
          {
            "name": "agentId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Agent to load the metadata, if necessary."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Relationships to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Relationships. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RelationshipModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/renameblock": {
      "post": {
        "description": "Modify Block name",
        "summary": "Maps_RenameBlock",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdRenameblockByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "blockId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "ID of the Block."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model of the Map.",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            }
          },
          {
            "name": "newName",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Block name."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapModelBase"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/revert": {
      "post": {
        "description": "Revert a Map to a prior version",
        "summary": "Maps_RevertMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdRevertByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "revision",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "Number of Map revision to restore."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/revisions": {
      "get": {
        "description": "Return a list of Map revisions",
        "summary": "Maps_GetMapRevisions",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdRevisionsByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Maps to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Maps. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MapRevisionModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/run": {
      "post": {
        "description": "Run a single Map",
        "summary": "Maps_RunMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdRunByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutionCommandModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/run/{commandId}": {
      "get": {
        "description": "Return the status of the Run Map Now command",
        "summary": "Maps_GetRunMapResult",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdRunCommandIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "commandId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID returned by the Run Single Map command."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ExecutionCommandModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/validate": {
      "post": {
        "description": "Validate a Map",
        "summary": "Maps_ValidateMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdValidateByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID or name of the Map to validate."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Map.",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/ValidationResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{mapId}/validateformula": {
      "post": {
        "description": "Validate a Formula in a Map",
        "summary": "Maps_ValidateFormula",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsMapIdValidateformulaByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Formula.",
            "schema": {
              "$ref": "#/definitions/ValidationFormulaModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FormulaIssueModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/{validationId}/validationresults": {
      "get": {
        "description": "Return Map validation results",
        "summary": "Maps_GetValidationMapResults",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsValidationIdValidationresultsByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "validationId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID returned by the Validate Map command, or a mapId."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Maps to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Maps. Default value is 100."
          },
          {
            "name": "filterByBlockId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Block. Return errors only for a specific Block."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MapIssueModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/advanced": {
      "post": {
        "description": "Create an Advanced Map",
        "summary": "Maps_CreateAdvMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsAdvancedByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Advanced Map.",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            }
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Revision comment."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/advanced/{mapId}": {
      "put": {
        "description": "Modify an Advanced Map",
        "summary": "Maps_UpdateAdvMap",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsAdvancedMapIdByOrgIdAndSolutionIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Map."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Advanced Map.",
            "schema": {
              "$ref": "#/definitions/MapModelAdv"
            }
          },
          {
            "name": "unlockMap",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to unlock Map after update."
          },
          {
            "name": "validateMap",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to run validation against the Map being updated. Default is false."
          },
          {
            "name": "prepareMap",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to run prepare against the Map being updated. Default is false."
          },
          {
            "name": "oldConnectionId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the Connection to be reassigned."
          },
          {
            "name": "newConnectionId",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "ID of the replacement Connection."
          },
          {
            "name": "updateBlockConnectionOnly",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to leave reassigned Connection in the Map. Set to false to remove reassigned Connection from the Map."
          },
          {
            "name": "comment",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Revision comment."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/MapModelBase"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/export": {
      "post": {
        "description": "Export Maps from a Solution",
        "summary": "Maps_Export",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsExportByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "mapIds",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Comma delimited list of Map IDs to export."
          },
          {
            "name": "revision",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": "Map revision to export when one mapId is specified."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/export/{exportId}": {
      "get": {
        "description": "Return exported Maps",
        "summary": "Maps_GetExportedMaps",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsExportExportIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "exportId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the export request."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/maps/import": {
      "post": {
        "description": "Import Maps into a Solution",
        "summary": "Maps_ImportMaps",
        "tags": [
          "Maps"
        ],
        "operationId": "V1OrgsSolutionsMapsImportByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "models",
            "in": "body",
            "required": true,
            "description": "Models for one or more Maps.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SysDefinitionBase"
              }
            }
          },
          {
            "name": "importedMapOrder",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "When Map names are the same, append imported Maps or merge with existing Maps. Default is True. True = Append. False = Merge."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/marketplace/connectors": {
      "get": {
        "description": "Return a list of Marketplace Connectors",
        "summary": "Marketplace_GetMarketplaceConnectors",
        "tags": [
          "Marketplace"
        ],
        "operationId": "V1MarketplaceConnectorsGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "filterByName",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of the Connector."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MarketplaceConnectorDetail"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs": {
      "get": {
        "description": "Return a list of Organizations",
        "summary": "Organizations_GetOrganizations",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "parentId",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "ID of the parent Organization. Only child Organizations are returned."
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of the Organization, exact match."
          },
          {
            "name": "nameContains",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by Name of the Organization with Contains parameter."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Organizations to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Organizations. Default value is 100."
          },
          {
            "name": "noPagination",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to ignore limit and offset, and return all Organizations without pagination. Default value is false."
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "enum": [
              "All",
              "OK",
              "Processing",
              "Disabled",
              "Warning",
              "Failure",
              "SystemIssue",
              "SystemFailure"
            ],
            "x-enum-elements": [
              {
                "name": "All",
                "description": ""
              },
              {
                "name": "OK",
                "description": ""
              },
              {
                "name": "Processing",
                "description": ""
              },
              {
                "name": "Disabled",
                "description": ""
              },
              {
                "name": "Warning",
                "description": ""
              },
              {
                "name": "Failure",
                "description": ""
              },
              {
                "name": "SystemIssue",
                "description": ""
              },
              {
                "name": "SystemFailure",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter by Organization status."
          },
          {
            "name": "expandStatus",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Return Organization status. Default value is false."
          },
          {
            "name": "filterByAPIAccess",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "True returns only Organizations with your IP address in the range of IPs with API access. Default value is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a child Organization",
        "summary": "Organizations_CreateOrganization",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the child Organization.\r\n                Required: Name, ParentId",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}": {
      "get": {
        "description": "Return information about an Organization",
        "summary": "Organizations_GetOrganization",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify an Organization",
        "summary": "Organizations_UpdateOrganization",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsByOrgIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Organization.",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a child Organization",
        "summary": "Organizations_DeleteOrganization",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsByOrgIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the child Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/endpoints": {
      "get": {
        "description": "Return a list of Message Endpoints",
        "summary": "Organizations_GetEndpoints",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsEndpointsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of endpoints to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of endpoints. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MessageEndpointModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/endpoints/{endpointid}/clear": {
      "put": {
        "description": "Clear the Message queue",
        "summary": "Organizations_clearendpoint",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsEndpointsClearByOrgIdAndEndpointidPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "endpointid",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the Message Endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/Functions": {
      "get": {
        "description": "Return a list of Functions",
        "summary": "Organizations_GetFunctions",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsFunctionsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the parent Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FunctionModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/securityrules": {
      "get": {
        "description": "Return a list of security rules",
        "summary": "Organizations_GetSecurityRules",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecurityrulesByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of security rules to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of security rules. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrganizationSecurityRuleModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a security rule",
        "summary": "Organizations_CreateSecurityRules",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecurityrulesByOrgIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the security rule.",
            "schema": {
              "$ref": "#/definitions/OrganizationSecurityRuleModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationSecurityRuleModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/securityrules/{ruleId}": {
      "get": {
        "description": "Return information about a security rule",
        "summary": "Organizations_GetSecurityRule",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecurityrulesByOrgIdAndRuleIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the security rule."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationSecurityRuleModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify a security rule",
        "summary": "Organizations_UpdateSecurityRules",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecurityrulesByOrgIdAndRuleIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the security rule."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the security rule.",
            "schema": {
              "$ref": "#/definitions/OrganizationSecurityRuleModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrganizationSecurityRuleModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a security rule",
        "summary": "Organizations_DeleteSecurityRules",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecurityrulesByOrgIdAndRuleIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the security rule."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/SecuritySettings": {
      "get": {
        "description": "Return a list of security settings",
        "summary": "Organizations_GetSecuritySettings",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecuritySettingsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSecuritySettingModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify security settings",
        "summary": "Organizations_SetSecuritySettings",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecuritySettingsByOrgIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the security settings.",
            "schema": {
              "$ref": "#/definitions/SetSecuritySettingModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSecuritySettingModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/SecuritySettings/resetaccesstoken": {
      "put": {
        "description": "Reset the Event Solution access token",
        "summary": "Organizations_resetaccesstoken",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecuritySettingsResetaccesstokenByOrgIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSecuritySettingModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/SecuritySettings/resetcryptotoken": {
      "put": {
        "description": "Reset the API encryption token",
        "summary": "Organizations_resetcryptotoken",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSecuritySettingsResetcryptotokenByOrgIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/GetSecuritySettingModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/Settings": {
      "get": {
        "description": "Return a list of settings",
        "summary": "Organizations_GetSettings",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsSettingsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the parent Organization."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SettingModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/users": {
      "get": {
        "description": "Return a list of Users",
        "summary": "Organizations_GetUsers",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsUsersByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Users to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Users. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrgUserModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify a User",
        "summary": "Organizations_UpdateUser",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsUsersByOrgIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the User.",
            "schema": {
              "$ref": "#/definitions/OrgUserModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/OrgUserModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a User",
        "summary": "Organizations_DeleteUser",
        "tags": [
          "Organizations"
        ],
        "operationId": "V1OrgsUsersByOrgIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "email",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Email address of the User."
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/register": {
      "post": {
        "description": "Provision a new Organization for a User",
        "summary": "Register_Create",
        "tags": [
          "Register"
        ],
        "operationId": "V1RegisterPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Organization.",
            "schema": {
              "$ref": "#/definitions/RegisterModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/RegisterModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions": {
      "get": {
        "description": "Return a list of Solutions",
        "summary": "Solutions_GetSolutions",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of Solutions to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of Solutions. Default value is 100."
          },
          {
            "name": "solutionNameFilter",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Filter by Solution name."
          },
          {
            "name": "solutionType",
            "in": "query",
            "required": false,
            "enum": [
              "Replication",
              "Integration",
              "IntegrationEvent",
              "Migration"
            ],
            "x-enum-elements": [
              {
                "name": "Replication",
                "description": ""
              },
              {
                "name": "Integration",
                "description": ""
              },
              {
                "name": "IntegrationEvent",
                "description": ""
              },
              {
                "name": "Migration",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter by Solution type."
          },
          {
            "name": "solutionStatusFilter",
            "in": "query",
            "required": false,
            "enum": [
              "Disabled",
              "Idle",
              "IdleLastRunRowErrors",
              "IdleLastRunFailed",
              "InProgress",
              "Preparing",
              "Provisioning",
              "ProvisionError",
              "Starting",
              "Incomplete",
              "Stopping",
              "OnDemand",
              "OnDemandLastRunFailed",
              "OnDemandLastRunRowErrors",
              "AgentUpdating",
              "AgentShutdown",
              "AgentHeartbeatLate",
              "AgentHeartbeatFailed",
              "WaitingForEvent",
              "WaitingToUpdateAgent",
              "WaitingToUpdateConnector",
              "UpdatingConnector",
              "WaitingToRestartAgentUserRequest",
              "WaitingToRestartAgentMemoryLimit",
              "AgentRestarting"
            ],
            "x-enum-elements": [
              {
                "name": "Disabled",
                "description": ""
              },
              {
                "name": "Idle",
                "description": ""
              },
              {
                "name": "IdleLastRunRowErrors",
                "description": ""
              },
              {
                "name": "IdleLastRunFailed",
                "description": ""
              },
              {
                "name": "InProgress",
                "description": ""
              },
              {
                "name": "Preparing",
                "description": ""
              },
              {
                "name": "Provisioning",
                "description": ""
              },
              {
                "name": "ProvisionError",
                "description": ""
              },
              {
                "name": "Starting",
                "description": ""
              },
              {
                "name": "Incomplete",
                "description": ""
              },
              {
                "name": "Stopping",
                "description": ""
              },
              {
                "name": "OnDemand",
                "description": ""
              },
              {
                "name": "OnDemandLastRunFailed",
                "description": ""
              },
              {
                "name": "OnDemandLastRunRowErrors",
                "description": ""
              },
              {
                "name": "AgentUpdating",
                "description": ""
              },
              {
                "name": "AgentShutdown",
                "description": ""
              },
              {
                "name": "AgentHeartbeatLate",
                "description": ""
              },
              {
                "name": "AgentHeartbeatFailed",
                "description": ""
              },
              {
                "name": "WaitingForEvent",
                "description": ""
              },
              {
                "name": "WaitingToUpdateAgent",
                "description": ""
              },
              {
                "name": "WaitingToUpdateConnector",
                "description": ""
              },
              {
                "name": "UpdatingConnector",
                "description": ""
              },
              {
                "name": "WaitingToRestartAgentUserRequest",
                "description": ""
              },
              {
                "name": "WaitingToRestartAgentMemoryLimit",
                "description": ""
              },
              {
                "name": "AgentRestarting",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Filter by Solution status."
          },
          {
            "name": "sortName",
            "in": "query",
            "required": false,
            "enum": [
              "Name",
              "SolutionType",
              "Status",
              "LastRunTime",
              "NextRunTime"
            ],
            "x-enum-elements": [
              {
                "name": "Name",
                "description": ""
              },
              {
                "name": "SolutionType",
                "description": ""
              },
              {
                "name": "Status",
                "description": ""
              },
              {
                "name": "LastRunTime",
                "description": ""
              },
              {
                "name": "NextRunTime",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sort by selected parameter. Default value is Name."
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "enum": [
              "asc",
              "desc"
            ],
            "x-enum-elements": [
              {
                "name": "asc",
                "description": ""
              },
              {
                "name": "desc",
                "description": ""
              }
            ],
            "type": "string",
            "description": "Sort ascending or descending. Default value is ascending."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "post": {
        "description": "Create a Solution",
        "summary": "Solutions_CreateSolution",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsByOrgIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Solution.\r\n                Required: Name, AgentId, and SolutionType.",
            "schema": {
              "$ref": "#/definitions/SolutionModel"
            }
          },
          {
            "name": "checkForBulk",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Enables bulk operations if supported by Connection.  Default value is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}": {
      "get": {
        "description": "Return information about a Solution",
        "summary": "Solutions_GetOrgSolutionById",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify a Solution",
        "summary": "Solutions_UpdateSolution",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsByOrgIdAndSolutionIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Solution.",
            "schema": {
              "$ref": "#/definitions/SolutionModel"
            }
          },
          {
            "name": "checkForBulk",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Enables bulk operations if supported by Connection.  Default value is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "delete": {
        "description": "Delete a Solution",
        "summary": "Solutions_DeleteSolution",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsByOrgIdAndSolutionIdDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/clone": {
      "post": {
        "description": "Copy an entire Solution into another Organization",
        "summary": "Solutions_CloneSolution",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsCloneByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the source Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the source Solution."
          },
          {
            "name": "destOrgId",
            "in": "query",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the destination Organization."
          },
          {
            "name": "destAgentId",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "ID of the destination Agent."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/connections": {
      "get": {
        "description": "Return information about Connections for a Solution",
        "summary": "Solutions_GetSolutionConnections",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsConnectionsByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionConnectionModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/prepare": {
      "post": {
        "description": "Prepare a Solution to run",
        "summary": "Solutions_PrepareSolution",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsPrepareByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionPrepareModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/prepare/{prepareId}": {
      "get": {
        "description": "Return the status of the Solution prepare command",
        "summary": "Solutions_PrepareSolutionStatus",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsPreparePrepareIdByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "prepareId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the prepare Solution command."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionPrepareModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/schedule": {
      "get": {
        "description": "Return information about a schedule for a Solution",
        "summary": "Solutions_GetSolutionSchedule",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsScheduleByOrgIdAndSolutionIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionScheduleModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify a schedule for a Solution",
        "summary": "Solutions_UpdateSolutionSchedule",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsScheduleByOrgIdAndSolutionIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for the Schedule.\r\n                See the RecurringModel TimeZone topic in the Scribe API Help\r\n                for information on the TimeZone field.",
            "schema": {
              "$ref": "#/definitions/SolutionScheduleModel"
            }
          },
          {
            "name": "checkForBulk",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Enables bulk operations if supported by Connection.  Default value is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/SolutionScheduleModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/start": {
      "post": {
        "description": "Start a Solution execution",
        "summary": "Solutions_Start",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsStartByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/startmonitor": {
      "post": {
        "description": "Start monitoring a Solution when it runs",
        "summary": "Solutions_StartMonitorSolution",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsStartmonitorByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/stop": {
      "post": {
        "description": "Stop a Solution execution",
        "summary": "Solutions_Stop",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsStopByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/solutions/{solutionId}/stopmonitor": {
      "post": {
        "description": "Stop monitoring a Solution when it runs",
        "summary": "Solutions_StopMonitorSolution",
        "tags": [
          "Solutions"
        ],
        "operationId": "V1OrgsSolutionsStopmonitorByOrgIdAndSolutionIdPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "solutionId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Solution."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/orgs/{orgId}/subscriptions": {
      "get": {
        "description": "Return a list of Subscriptions",
        "summary": "Subscriptions_GetByOrg",
        "tags": [
          "Subscriptions"
        ],
        "operationId": "V1OrgsSubscriptionsByOrgIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orgId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32",
            "description": "ID of the Organization."
          },
          {
            "name": "showMonthlyUsage",
            "in": "query",
            "required": false,
            "type": "boolean",
            "description": "Set to true to return monthly Subscription usage.\r\n                Default value is false."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/users": {
      "get": {
        "description": "Return your User information",
        "summary": "Users_GetUser",
        "tags": [
          "Users"
        ],
        "operationId": "V1UsersGet",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify your User information",
        "summary": "Users_PutUser",
        "tags": [
          "Users"
        ],
        "operationId": "V1UsersPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userModel",
            "in": "body",
            "required": true,
            "description": "Model for the User.",
            "schema": {
              "$ref": "#/definitions/UserModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/UserModel"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/users/{userId}/alertsettings": {
      "get": {
        "description": "Return a list of email notification settings",
        "summary": "Users_GetAlertSettings",
        "tags": [
          "Users"
        ],
        "operationId": "V1UsersAlertsettingsByUserIdGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the User."
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Number of settings to skip before returning results. Default value is 0."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of settings. Default value is 100."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserNotficationSettingsModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      },
      "put": {
        "description": "Modify email notification settings",
        "summary": "Users_PutAlertSettings",
        "tags": [
          "Users"
        ],
        "operationId": "V1UsersAlertsettingsByUserIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the User."
          },
          {
            "name": "model",
            "in": "body",
            "required": true,
            "description": "Model for email notification settings.",
            "schema": {
              "$ref": "#/definitions/UserNotficationSettingsModel"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/users/invitations": {
      "get": {
        "description": "Return a list of Invitations",
        "summary": "Users_invitations",
        "tags": [
          "Users"
        ],
        "operationId": "V1UsersInvitationsGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Email address of the User."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserInvitationModel"
              }
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    },
    "/v1/users/invitations/{inviteId}": {
      "put": {
        "description": "Modify Invitation status",
        "summary": "Users_AcceptInvitations",
        "tags": [
          "Users"
        ],
        "operationId": "V1UsersInvitationsByInviteIdPut",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "inviteId",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "ID of the Invitation."
          },
          {
            "name": "accept",
            "in": "query",
            "required": true,
            "type": "boolean",
            "description": "Set to true to accept or false to decline the Invitation."
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/IHttpActionResult"
            },
            "examples": {}
          }
        },
        "x-unitTests": [],
        "x-operation-settings": {
          "CollectParameters": false,
          "AllowDynamicQueryParameters": false,
          "AllowDynamicFormParameters": false,
          "IsMultiContentStreaming": false
        }
      }
    }
  },
  "definitions": {
    "MapType": {
      "title": "mapType",
      "example": "ReplicationServicesMap",
      "x-enum-elements": [
        {
          "name": "ReplicationServicesMap",
          "description": ""
        },
        {
          "name": "IntegrationServicesBasicMap",
          "description": ""
        },
        {
          "name": "IntegrationServicesAdvancedMap",
          "description": ""
        },
        {
          "name": "IntegrationServicesAdvancedRequestResponseMap",
          "description": ""
        },
        {
          "name": "IntegrationServicesAdvancedMessageMap",
          "description": ""
        },
        {
          "name": "IntegrationServicesSysControllerMap",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "ReplicationServicesMap",
        "IntegrationServicesBasicMap",
        "IntegrationServicesAdvancedMap",
        "IntegrationServicesAdvancedRequestResponseMap",
        "IntegrationServicesAdvancedMessageMap",
        "IntegrationServicesSysControllerMap"
      ]
    },
    "Result": {
      "title": "result",
      "example": "CompletedSuccessfully",
      "x-enum-elements": [
        {
          "name": "CompletedSuccessfully",
          "description": ""
        },
        {
          "name": "FatalError",
          "description": ""
        },
        {
          "name": "CompletedWithErrors",
          "description": ""
        },
        {
          "name": "InProgress",
          "description": ""
        },
        {
          "name": "RecordErrorsAndFatalErrors",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "CompletedSuccessfully",
        "FatalError",
        "CompletedWithErrors",
        "InProgress",
        "RecordErrorsAndFatalErrors"
      ]
    },
    "ExecutionHistoryColumnSort": {
      "title": "executionHistoryColumnSort",
      "example": "Start",
      "x-enum-elements": [
        {
          "name": "Start",
          "description": ""
        },
        {
          "name": "Result",
          "description": ""
        },
        {
          "name": "RecordsProcessed",
          "description": ""
        },
        {
          "name": "RecordsFailed",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Start",
        "Result",
        "RecordsProcessed",
        "RecordsFailed"
      ]
    },
    "SortOrder": {
      "title": "sortOrder",
      "example": "asc",
      "x-enum-elements": [
        {
          "name": "asc",
          "description": ""
        },
        {
          "name": "desc",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "asc",
        "desc"
      ]
    },
    "Action": {
      "title": "action",
      "example": "None",
      "x-enum-elements": [
        {
          "name": "None",
          "description": ""
        },
        {
          "name": "Create",
          "description": ""
        },
        {
          "name": "InsertUpdate",
          "description": ""
        },
        {
          "name": "UpdateInsert",
          "description": ""
        },
        {
          "name": "Query",
          "description": ""
        },
        {
          "name": "Update",
          "description": ""
        },
        {
          "name": "Delete",
          "description": ""
        },
        {
          "name": "NativeQuery",
          "description": ""
        },
        {
          "name": "CreateWith",
          "description": ""
        },
        {
          "name": "UpdateWith",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "None",
        "Create",
        "InsertUpdate",
        "UpdateInsert",
        "Query",
        "Update",
        "Delete",
        "NativeQuery",
        "CreateWith",
        "UpdateWith"
      ]
    },
    "Status": {
      "title": "status",
      "example": "All",
      "x-enum-elements": [
        {
          "name": "All",
          "description": ""
        },
        {
          "name": "OK",
          "description": ""
        },
        {
          "name": "Processing",
          "description": ""
        },
        {
          "name": "Disabled",
          "description": ""
        },
        {
          "name": "Warning",
          "description": ""
        },
        {
          "name": "Failure",
          "description": ""
        },
        {
          "name": "SystemIssue",
          "description": ""
        },
        {
          "name": "SystemFailure",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "All",
        "OK",
        "Processing",
        "Disabled",
        "Warning",
        "Failure",
        "SystemIssue",
        "SystemFailure"
      ]
    },
    "SolutionType": {
      "title": "solutionType",
      "example": "Replication",
      "x-enum-elements": [
        {
          "name": "Replication",
          "description": ""
        },
        {
          "name": "Integration",
          "description": ""
        },
        {
          "name": "IntegrationEvent",
          "description": ""
        },
        {
          "name": "Migration",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Replication",
        "Integration",
        "IntegrationEvent",
        "Migration"
      ]
    },
    "SolutionStatusFilter": {
      "title": "solutionStatusFilter",
      "example": "Disabled",
      "x-enum-elements": [
        {
          "name": "Disabled",
          "description": ""
        },
        {
          "name": "Idle",
          "description": ""
        },
        {
          "name": "IdleLastRunRowErrors",
          "description": ""
        },
        {
          "name": "IdleLastRunFailed",
          "description": ""
        },
        {
          "name": "InProgress",
          "description": ""
        },
        {
          "name": "Preparing",
          "description": ""
        },
        {
          "name": "Provisioning",
          "description": ""
        },
        {
          "name": "ProvisionError",
          "description": ""
        },
        {
          "name": "Starting",
          "description": ""
        },
        {
          "name": "Incomplete",
          "description": ""
        },
        {
          "name": "Stopping",
          "description": ""
        },
        {
          "name": "OnDemand",
          "description": ""
        },
        {
          "name": "OnDemandLastRunFailed",
          "description": ""
        },
        {
          "name": "OnDemandLastRunRowErrors",
          "description": ""
        },
        {
          "name": "AgentUpdating",
          "description": ""
        },
        {
          "name": "AgentShutdown",
          "description": ""
        },
        {
          "name": "AgentHeartbeatLate",
          "description": ""
        },
        {
          "name": "AgentHeartbeatFailed",
          "description": ""
        },
        {
          "name": "WaitingForEvent",
          "description": ""
        },
        {
          "name": "WaitingToUpdateAgent",
          "description": ""
        },
        {
          "name": "WaitingToUpdateConnector",
          "description": ""
        },
        {
          "name": "UpdatingConnector",
          "description": ""
        },
        {
          "name": "WaitingToRestartAgentUserRequest",
          "description": ""
        },
        {
          "name": "WaitingToRestartAgentMemoryLimit",
          "description": ""
        },
        {
          "name": "AgentRestarting",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Disabled",
        "Idle",
        "IdleLastRunRowErrors",
        "IdleLastRunFailed",
        "InProgress",
        "Preparing",
        "Provisioning",
        "ProvisionError",
        "Starting",
        "Incomplete",
        "Stopping",
        "OnDemand",
        "OnDemandLastRunFailed",
        "OnDemandLastRunRowErrors",
        "AgentUpdating",
        "AgentShutdown",
        "AgentHeartbeatLate",
        "AgentHeartbeatFailed",
        "WaitingForEvent",
        "WaitingToUpdateAgent",
        "WaitingToUpdateConnector",
        "UpdatingConnector",
        "WaitingToRestartAgentUserRequest",
        "WaitingToRestartAgentMemoryLimit",
        "AgentRestarting"
      ]
    },
    "SortName": {
      "title": "sortName",
      "example": "Name",
      "x-enum-elements": [
        {
          "name": "Name",
          "description": ""
        },
        {
          "name": "SolutionType",
          "description": ""
        },
        {
          "name": "Status",
          "description": ""
        },
        {
          "name": "LastRunTime",
          "description": ""
        },
        {
          "name": "NextRunTime",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Name",
        "SolutionType",
        "Status",
        "LastRunTime",
        "NextRunTime"
      ]
    },
    "FailedRecord": {
      "title": "FailedRecord",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sourceData": {
          "type": "object",
          "$ref": "#/definitions/SourceData"
        }
      }
    },
    "SourceData": {
      "title": "SourceData",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataProperties"
          }
        },
        "children": {
          "type": "string"
        }
      }
    },
    "DataProperties": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "IHttpActionResult": {
      "title": "IHttpActionResult",
      "type": "object"
    },
    "Status11": {
      "title": "Status11",
      "example": "Unknown",
      "x-enum-elements": [
        {
          "name": "Unknown",
          "description": ""
        },
        {
          "name": "Running",
          "description": ""
        },
        {
          "name": "HeartbeatLate",
          "description": ""
        },
        {
          "name": "HeartbeatFailed",
          "description": ""
        },
        {
          "name": "Shutdown",
          "description": ""
        },
        {
          "name": "ShutdownCloud",
          "description": ""
        },
        {
          "name": "WaitingToUpdateAgent",
          "description": ""
        },
        {
          "name": "UpdatingAgent",
          "description": ""
        },
        {
          "name": "WaitingToUpdateConnector",
          "description": ""
        },
        {
          "name": "UpdatingConnector",
          "description": ""
        },
        {
          "name": "WaitingToRestartAgentUserRequest",
          "description": ""
        },
        {
          "name": "WaitingToRestartAgentMemoryLimit",
          "description": ""
        },
        {
          "name": "Restarting",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Unknown",
        "Running",
        "HeartbeatLate",
        "HeartbeatFailed",
        "Shutdown",
        "ShutdownCloud",
        "WaitingToUpdateAgent",
        "UpdatingAgent",
        "WaitingToUpdateConnector",
        "UpdatingConnector",
        "WaitingToRestartAgentUserRequest",
        "WaitingToRestartAgentMemoryLimit",
        "Restarting"
      ]
    },
    "AgentModel": {
      "title": "AgentModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/Status11"
        },
        "MachineName": {
          "description": "",
          "type": "string"
        },
        "Version": {
          "description": "",
          "type": "string"
        },
        "ServiceName": {
          "description": "",
          "type": "string"
        },
        "LastStartTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastShutdownTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastContactTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "IsCloudAgent": {
          "description": "",
          "type": "boolean"
        },
        "IsUpdating": {
          "description": "",
          "type": "boolean"
        },
        "UsedInSolutions": {
          "description": "",
          "type": "string"
        },
        "UpdateStateDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "InstalledConnectors": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgentConnectorModel"
          }
        }
      }
    },
    "AgentConnectorModel": {
      "title": "AgentConnectorModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Version": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ProvisionOnPremiseAgentModel": {
      "title": "ProvisionOnPremiseAgentModel",
      "type": "object",
      "properties": {
        "AgentInstallationKey": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "AgentInstallerLocation": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ConnectionModel": {
      "title": "ConnectionModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Alias": {
          "description": "",
          "type": "string"
        },
        "Color": {
          "description": "",
          "type": "string"
        },
        "ConnectorId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "ConnectorType": {
          "description": "",
          "type": "string"
        },
        "CreateDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "UsedInSolutions": {
          "description": "",
          "type": "string"
        },
        "Properties": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Keyvaluepair[string,string]"
          }
        }
      }
    },
    "Keyvaluepair[string,string]": {
      "title": "KeyValuePair[String,String]",
      "type": "object",
      "properties": {
        "Key": {
          "description": "",
          "type": "string"
        },
        "Value": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ExtendedCommandModel": {
      "title": "ExtendedCommandModel",
      "type": "object",
      "properties": {
        "ReplyData": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Keyvaluepair[string,string]"
          }
        },
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Reply": {
          "description": "",
          "type": "string"
        },
        "Status": {
          "description": "",
          "type": "string"
        }
      }
    },
    "CommandModel": {
      "title": "CommandModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Reply": {
          "description": "",
          "type": "string"
        },
        "Status": {
          "description": "",
          "type": "string"
        }
      }
    },
    "EntityModel": {
      "title": "EntityModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ModificationBy": {
          "description": "",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "FullName": {
          "description": "",
          "type": "string"
        },
        "OriginalName": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "IsHidden": {
          "description": "",
          "type": "boolean"
        },
        "Actions": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionModel"
          }
        }
      }
    },
    "KnownAction": {
      "title": "KnownAction",
      "example": "None",
      "x-enum-elements": [
        {
          "name": "None",
          "description": ""
        },
        {
          "name": "Create",
          "description": ""
        },
        {
          "name": "InsertUpdate",
          "description": ""
        },
        {
          "name": "UpdateInsert",
          "description": ""
        },
        {
          "name": "Query",
          "description": ""
        },
        {
          "name": "Update",
          "description": ""
        },
        {
          "name": "Delete",
          "description": ""
        },
        {
          "name": "NativeQuery",
          "description": ""
        },
        {
          "name": "CreateWith",
          "description": ""
        },
        {
          "name": "UpdateWith",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "None",
        "Create",
        "InsertUpdate",
        "UpdateInsert",
        "Query",
        "Update",
        "Delete",
        "NativeQuery",
        "CreateWith",
        "UpdateWith"
      ]
    },
    "ActionModel": {
      "title": "ActionModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "FullName": {
          "description": "",
          "type": "string"
        },
        "KnownAction": {
          "$ref": "#/definitions/KnownAction"
        },
        "SupportsLookupConditions": {
          "description": "",
          "type": "boolean"
        },
        "SupportsInput": {
          "description": "",
          "type": "boolean"
        },
        "SupportsBulk": {
          "description": "",
          "type": "boolean"
        },
        "SupportsMultipleRecordOperations": {
          "description": "",
          "type": "boolean"
        },
        "SupportsSequences": {
          "description": "",
          "type": "boolean"
        },
        "SupportsConstraints": {
          "description": "",
          "type": "boolean"
        },
        "SupportsRelations": {
          "description": "",
          "type": "boolean"
        },
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ModificationBy": {
          "description": "",
          "type": "string"
        }
      }
    },
    "PropertyModel": {
      "title": "PropertyModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "FullName": {
          "description": "",
          "type": "string"
        },
        "OriginalName": {
          "description": "",
          "type": "string"
        },
        "PropertyType": {
          "description": "",
          "type": "string"
        },
        "MinOccurs": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "MaxOccurs": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "Size": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "PresentationType": {
          "description": "",
          "type": "string"
        },
        "Nullable": {
          "description": "",
          "type": "boolean"
        },
        "IsPrimaryKey": {
          "description": "",
          "type": "boolean"
        },
        "UsedInQuerySelect": {
          "description": "",
          "type": "boolean"
        },
        "UsedInQueryConstraint": {
          "description": "",
          "type": "boolean"
        },
        "UsedInActionInput": {
          "description": "",
          "type": "boolean"
        },
        "UsedInActionOutput": {
          "description": "",
          "type": "boolean"
        },
        "UsedInLookupCondition": {
          "description": "",
          "type": "boolean"
        },
        "UsedInQuerySequence": {
          "description": "",
          "type": "boolean"
        },
        "RequiredInActionInput": {
          "description": "",
          "type": "boolean"
        },
        "Ordinal": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ModificationBy": {
          "description": "",
          "type": "string"
        },
        "IsComplexType": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "RelationshipModel": {
      "title": "RelationshipModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "FullName": {
          "description": "",
          "type": "string"
        },
        "OriginalName": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "ThisEntityFullName": {
          "description": "",
          "type": "string"
        },
        "RelatedEntityFullName": {
          "description": "",
          "type": "string"
        },
        "ThisProperties": {
          "description": "",
          "type": "string"
        },
        "RelatedProperties": {
          "description": "",
          "type": "string"
        },
        "RelationType": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ModificationBy": {
          "description": "",
          "type": "string"
        },
        "ParentId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "UniqueId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Path": {
          "description": "",
          "type": "string"
        }
      }
    },
    "BlockType": {
      "title": "BlockType",
      "example": "None",
      "x-enum-elements": [
        {
          "name": "None",
          "description": ""
        },
        {
          "name": "ForEach",
          "description": ""
        },
        {
          "name": "Operation",
          "description": ""
        },
        {
          "name": "IfElse",
          "description": ""
        },
        {
          "name": "Query",
          "description": ""
        },
        {
          "name": "Lookup",
          "description": ""
        },
        {
          "name": "Insert",
          "description": ""
        },
        {
          "name": "Delete",
          "description": ""
        },
        {
          "name": "Update",
          "description": ""
        },
        {
          "name": "UpdateInsert",
          "description": ""
        },
        {
          "name": "ForEachChild",
          "description": ""
        },
        {
          "name": "Upsert",
          "description": ""
        },
        {
          "name": "LoopExit",
          "description": ""
        },
        {
          "name": "Group",
          "description": ""
        },
        {
          "name": "Loop",
          "description": ""
        },
        {
          "name": "Continue",
          "description": ""
        },
        {
          "name": "NativeQuery",
          "description": ""
        },
        {
          "name": "MapExit",
          "description": ""
        },
        {
          "name": "Fetch",
          "description": ""
        },
        {
          "name": "WaitForRequest",
          "description": ""
        },
        {
          "name": "BuildReply",
          "description": ""
        },
        {
          "name": "WaitForMessage",
          "description": ""
        },
        {
          "name": "Comment",
          "description": ""
        },
        {
          "name": "SendReply",
          "description": ""
        },
        {
          "name": "CreateWith",
          "description": ""
        },
        {
          "name": "UpdateWith",
          "description": ""
        },
        {
          "name": "Add",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "None",
        "ForEach",
        "Operation",
        "IfElse",
        "Query",
        "Lookup",
        "Insert",
        "Delete",
        "Update",
        "UpdateInsert",
        "ForEachChild",
        "Upsert",
        "LoopExit",
        "Group",
        "Loop",
        "Continue",
        "NativeQuery",
        "MapExit",
        "Fetch",
        "WaitForRequest",
        "BuildReply",
        "WaitForMessage",
        "Comment",
        "SendReply",
        "CreateWith",
        "UpdateWith",
        "Add"
      ]
    },
    "OperationModel": {
      "title": "OperationModel",
      "type": "object",
      "properties": {
        "OperationName": {
          "description": "",
          "type": "string"
        },
        "Action": {
          "$ref": "#/definitions/Action"
        },
        "BlockType": {
          "$ref": "#/definitions/BlockType"
        }
      }
    },
    "ConnectorModel": {
      "title": "ConnectorModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "VendorName": {
          "description": "",
          "type": "string"
        },
        "IsCloudSupported": {
          "description": "",
          "type": "boolean"
        },
        "UiName": {
          "description": "",
          "type": "string"
        },
        "UiVersion": {
          "description": "",
          "type": "string"
        },
        "SolutionRoles": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorSolutionRoleModel"
          }
        }
      }
    },
    "ConnectorSolutionRoleModel": {
      "title": "ConnectorSolutionRoleModel",
      "type": "object",
      "properties": {
        "Name": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ConnectorUIModel": {
      "title": "ConnectorUIModel",
      "type": "object",
      "properties": {
        "CompanyName": {
          "description": "",
          "type": "string"
        },
        "HelpURI": {
          "description": "",
          "type": "string"
        },
        "Version": {
          "description": "",
          "type": "string"
        },
        "UIDecorations": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/UIItem"
          }
        }
      }
    },
    "InputType": {
      "title": "InputType",
      "example": "Text",
      "x-enum-elements": [
        {
          "name": "Text",
          "description": ""
        },
        {
          "name": "Password",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Text",
        "Password"
      ]
    },
    "UIItem": {
      "title": "UIItem",
      "type": "object",
      "properties": {
        "InputType": {
          "$ref": "#/definitions/InputType"
        },
        "IsRequired": {
          "description": "",
          "type": "boolean"
        },
        "Label": {
          "description": "",
          "type": "string"
        },
        "Options": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Keyvaluepair[string,string]"
          }
        },
        "Order": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "PropertyName": {
          "description": "",
          "type": "string"
        }
      }
    },
    "KeyValueModel": {
      "title": "KeyValueModel",
      "type": "object",
      "properties": {
        "Key": {
          "description": "",
          "type": "string"
        },
        "Value": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ConnectorUpdatesModel": {
      "title": "ConnectorUpdatesModel",
      "type": "object",
      "properties": {
        "Version": {
          "description": "",
          "type": "string"
        },
        "ConnectorId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ModificationBy": {
          "description": "",
          "type": "string"
        },
        "Islocked": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "ConnectorCustomerModel": {
      "title": "ConnectorCustomerModel",
      "type": "object",
      "properties": {
        "OrgId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "OrgName": {
          "description": "",
          "type": "string"
        },
        "ProvisionedBy": {
          "description": "",
          "type": "string"
        },
        "ProvsionedDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "OrgId"
      ]
    },
    "ExecutionHistoryErrorModel": {
      "title": "ExecutionHistoryErrorModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "",
          "type": "string"
        },
        "FailedRecordId": {
          "description": "",
          "type": "string"
        },
        "MapName": {
          "description": "",
          "type": "string"
        },
        "SourceEntity": {
          "description": "",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "",
          "type": "string"
        },
        "ErrorDetail": {
          "description": "",
          "type": "string"
        },
        "AdditionalErrorDetails": {
          "description": "",
          "type": "string"
        },
        "CanReprocess": {
          "description": "",
          "type": "boolean"
        },
        "Marked": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "ExecutionHistoryModel": {
      "title": "ExecutionHistoryModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "",
          "type": "string"
        },
        "Start": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "Stop": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "RecordsProcessed": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "RecordsFailed": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "Result": {
          "$ref": "#/definitions/Result"
        },
        "Details": {
          "description": "",
          "type": "string"
        },
        "ReprocessRecordsRemaining": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "IsReprocessJob": {
          "description": "",
          "type": "boolean"
        },
        "Duration": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "SourceDataLocal": {
          "description": "",
          "type": "boolean"
        },
        "ProcessExecutionId": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ExecutionHistoryStatisticsModel": {
      "title": "ExecutionHistoryStatisticsModel",
      "type": "object",
      "properties": {
        "LegacyCounters": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Keyvaluepair[guid,dictionary[string,counter]]"
          }
        },
        "MapStatistics": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExecutionHistoryMapRowCountsModel"
          }
        },
        "LegacyCounterList": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Counter"
          }
        }
      }
    },
    "Keyvaluepair[guid,dictionary[string,counter]]": {
      "title": "KeyValuePair[Guid,Dictionary[String,Counter]]",
      "type": "object",
      "properties": {
        "Key": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Value": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Keyvaluepair[string,counter]"
          }
        }
      }
    },
    "ExecutionHistoryMapRowCountsModel": {
      "title": "ExecutionHistoryMapRowCountsModel",
      "type": "object",
      "properties": {
        "AverageTime": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "EntityName": {
          "description": "",
          "type": "string"
        },
        "Errors": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "MapId": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "MapName": {
          "description": "",
          "type": "string"
        },
        "MaxTimeInMs": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "MinTimeInMs": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "Rows": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "TotalTime": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "TotalTimeDisplay": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ActionType": {
      "title": "ActionType",
      "example": "Query",
      "x-enum-elements": [
        {
          "name": "Query",
          "description": ""
        },
        {
          "name": "Method",
          "description": ""
        },
        {
          "name": "Operation",
          "description": ""
        },
        {
          "name": "GetConnection",
          "description": ""
        },
        {
          "name": "Row",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Query",
        "Method",
        "Operation",
        "GetConnection",
        "Row"
      ]
    },
    "Counter": {
      "title": "Counter",
      "type": "object",
      "properties": {
        "CallCount": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "ErrorCount": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "TotalTimeInMs": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "MaxTimeInMs": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "MinTimeInMs": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "ActionType": {
          "$ref": "#/definitions/ActionType"
        },
        "Name": {
          "description": "",
          "type": "string"
        }
      }
    },
    "Keyvaluepair[string,counter]": {
      "title": "KeyValuePair[String,Counter]",
      "type": "object",
      "properties": {
        "Key": {
          "description": "",
          "type": "string"
        },
        "Value": {
          "$ref": "#/definitions/Counter"
        }
      }
    },
    "StatusType": {
      "title": "StatusType",
      "example": "Pending",
      "x-enum-elements": [
        {
          "name": "Pending",
          "description": ""
        },
        {
          "name": "Declined",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Pending",
        "Declined"
      ]
    },
    "RoleType": {
      "title": "RoleType",
      "example": "User",
      "x-enum-elements": [
        {
          "name": "User",
          "description": ""
        },
        {
          "name": "Administrator",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "User",
        "Administrator"
      ]
    },
    "InvitedUserModel": {
      "title": "InvitedUserModel",
      "type": "object",
      "properties": {
        "Email": {
          "description": "",
          "type": "string"
        },
        "RoleType": {
          "$ref": "#/definitions/RoleType"
        },
        "InvitedDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "StatusType": {
          "$ref": "#/definitions/StatusType"
        },
        "Message": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "Email",
        "RoleType"
      ]
    },
    "LookupTableModel": {
      "title": "LookupTableModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ModificationBy": {
          "description": "",
          "type": "string"
        },
        "LookupTableValues": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/LookupTableValueModel"
          }
        }
      }
    },
    "LookupTableValueModel": {
      "title": "LookupTableValueModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Value1": {
          "description": "",
          "type": "string"
        },
        "Value2": {
          "description": "",
          "type": "string"
        },
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ModificationBy": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ManagedConnectorModel": {
      "title": "ManagedConnectorModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "VendorName": {
          "description": "",
          "type": "string"
        },
        "Version": {
          "description": "",
          "type": "string"
        },
        "IsCloudSupported": {
          "description": "",
          "type": "boolean"
        },
        "IsFree": {
          "description": "",
          "type": "boolean"
        },
        "IsInMarketPlace": {
          "description": "",
          "type": "boolean"
        },
        "Customers": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorCustomerModel"
          }
        }
      }
    },
    "MapModelBase": {
      "title": "MapModelBase",
      "type": "object",
      "properties": {
        "Description": {
          "description": "",
          "type": "string"
        },
        "Valid": {
          "description": "",
          "type": "boolean"
        },
        "Id": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastRunDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "MapType": {
          "$ref": "#/definitions/MapType"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "NetChange": {
          "description": "",
          "type": "boolean"
        },
        "NetChangeFieldName": {
          "description": "",
          "type": "string"
        },
        "ProcessDefinitionDbId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "SourceConnectionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "SourceConnectionName": {
          "description": "",
          "type": "string"
        },
        "SourceConnectionAlias": {
          "description": "",
          "type": "string"
        },
        "SourceConnectionType": {
          "description": "",
          "type": "string"
        },
        "Version": {
          "description": "",
          "type": "string"
        }
      }
    },
    "MapRevisionModel": {
      "title": "MapRevisionModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "Revision": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "Comment": {
          "description": "",
          "type": "string"
        },
        "RevisionDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "CreatedBy": {
          "description": "",
          "type": "string"
        }
      }
    },
    "MapEventInfo": {
      "title": "MapEventInfo",
      "type": "object",
      "properties": {
        "Url": {
          "description": "",
          "type": "string"
        },
        "State": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "EntityName": {
          "description": "",
          "type": "string"
        },
        "EndpointId": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ColumnMappings": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataColumn"
          }
        }
      }
    },
    "DataType": {
      "title": "DataType",
      "example": "Boolean",
      "x-enum-elements": [
        {
          "name": "Boolean",
          "description": ""
        },
        {
          "name": "Byte",
          "description": ""
        },
        {
          "name": "Char",
          "description": ""
        },
        {
          "name": "DateTime",
          "description": ""
        },
        {
          "name": "Decimal",
          "description": ""
        },
        {
          "name": "Double",
          "description": ""
        },
        {
          "name": "Single",
          "description": ""
        },
        {
          "name": "Int16",
          "description": ""
        },
        {
          "name": "Int32",
          "description": ""
        },
        {
          "name": "Int64",
          "description": ""
        },
        {
          "name": "UInt16",
          "description": ""
        },
        {
          "name": "UInt32",
          "description": ""
        },
        {
          "name": "UInt64",
          "description": ""
        },
        {
          "name": "String",
          "description": ""
        },
        {
          "name": "Guid",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Boolean",
        "Byte",
        "Char",
        "DateTime",
        "Decimal",
        "Double",
        "Single",
        "Int16",
        "Int32",
        "Int64",
        "UInt16",
        "UInt32",
        "UInt64",
        "String",
        "Guid"
      ]
    },
    "DataColumn": {
      "title": "DataColumn",
      "type": "object",
      "properties": {
        "DataType": {
          "$ref": "#/definitions/DataType"
        },
        "DataTypeIndex": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "SampleValue": {
          "description": "",
          "type": "string"
        },
        "SelectedDataType": {
          "description": "",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "MapLinkModel": {
      "title": "MapLinkModel",
      "type": "object",
      "properties": {
        "Enabled": {
          "description": "",
          "type": "boolean"
        },
        "Valid": {
          "description": "",
          "type": "boolean"
        },
        "Id": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "Index": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "MapType": {
          "$ref": "#/definitions/MapType"
        },
        "Sources": {
          "description": "",
          "type": "string"
        },
        "Targets": {
          "description": "",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "LockedBy": {
          "description": "",
          "type": "string"
        },
        "LockDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "EventUrl": {
          "description": "",
          "type": "string"
        },
        "LastModified": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ModifiedBy": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ExecutionCommandModel": {
      "title": "ExecutionCommandModel",
      "type": "object",
      "properties": {
        "ExecutionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Reply": {
          "description": "",
          "type": "string"
        },
        "Status": {
          "description": "",
          "type": "string"
        }
      }
    },
    "MapModelAdv": {
      "title": "MapModelAdv",
      "type": "object",
      "properties": {
        "StartingBlockId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "TargetConnections": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectionInfo"
          }
        },
        "Blocks": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Revision": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "RevisionDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "RevisionComment": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "Valid": {
          "description": "",
          "type": "boolean"
        },
        "Id": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastRunDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "MapType": {
          "$ref": "#/definitions/MapType"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "NetChange": {
          "description": "",
          "type": "boolean"
        },
        "NetChangeFieldName": {
          "description": "",
          "type": "string"
        },
        "ProcessDefinitionDbId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "SourceConnectionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "SourceConnectionName": {
          "description": "",
          "type": "string"
        },
        "SourceConnectionAlias": {
          "description": "",
          "type": "string"
        },
        "SourceConnectionType": {
          "description": "",
          "type": "string"
        },
        "Version": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ConnectionInfo": {
      "title": "ConnectionInfo",
      "type": "object",
      "properties": {
        "ConnectionAlias": {
          "description": "",
          "type": "string"
        },
        "ConnectionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "ConnectionName": {
          "description": "",
          "type": "string"
        },
        "ConnectionType": {
          "description": "",
          "type": "string"
        }
      }
    },
    "SysDefinitionBase": {
      "title": "SysDefinitionBase",
      "type": "object",
      "properties": {
        "Description": {
          "description": "",
          "type": "string"
        },
        "Enabled": {
          "description": "",
          "type": "boolean"
        },
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "IsDeleted": {
          "description": "",
          "type": "boolean"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastRunDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LockedBy": {
          "description": "",
          "type": "string"
        },
        "MapType": {
          "$ref": "#/definitions/MapType"
        },
        "MapTypeString": {
          "description": "",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "NetChange": {
          "description": "",
          "type": "boolean"
        },
        "NetChangeFieldName": {
          "description": "",
          "type": "string"
        },
        "ProcessDefinitionDbId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "RelNameInformationLookup": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Keyvaluepair[string,reldefinfo]"
          }
        },
        "SourceConnectionAlias": {
          "description": "",
          "type": "string"
        },
        "SourceConnectionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "SourceConnectionName": {
          "description": "",
          "type": "string"
        },
        "SourceConnectionType": {
          "description": "",
          "type": "string"
        },
        "SourceEntity": {
          "description": "",
          "type": "string"
        },
        "SourcePrimaryKeyPropertyFullNames": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TargetConnectionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "TargetConnectionInfo": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Keyvaluepair[guid,connectioninfo]"
          }
        },
        "TargetConnectionName": {
          "description": "",
          "type": "string"
        },
        "TargetConnectionNames": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "TargetConnectionType": {
          "description": "",
          "type": "string"
        },
        "Valid": {
          "description": "",
          "type": "boolean"
        },
        "Version": {
          "description": "",
          "type": "string"
        }
      }
    },
    "Keyvaluepair[string,reldefinfo]": {
      "title": "KeyValuePair[String,RelDefInfo]",
      "type": "object",
      "properties": {
        "Key": {
          "description": "",
          "type": "string"
        },
        "Value": {
          "$ref": "#/definitions/RelDefInfo"
        }
      }
    },
    "Keyvaluepair[guid,connectioninfo]": {
      "title": "KeyValuePair[Guid,ConnectionInfo]",
      "type": "object",
      "properties": {
        "Key": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Value": {
          "$ref": "#/definitions/ConnectionInfo"
        }
      }
    },
    "RelationshipType": {
      "title": "RelationshipType",
      "example": "Parent",
      "x-enum-elements": [
        {
          "name": "Parent",
          "description": ""
        },
        {
          "name": "Child",
          "description": ""
        },
        {
          "name": "Property",
          "description": ""
        },
        {
          "name": "PropertyCollection",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Parent",
        "Child",
        "Property",
        "PropertyCollection"
      ]
    },
    "RelDefInfo": {
      "title": "RelDefInfo",
      "type": "object",
      "properties": {
        "ChildPropertyName": {
          "description": "",
          "type": "string"
        },
        "EntityName": {
          "description": "",
          "type": "string"
        },
        "IsRequired": {
          "description": "",
          "type": "boolean"
        },
        "ParentPropertyName": {
          "description": "",
          "type": "string"
        },
        "RelationshipAlais": {
          "description": "",
          "type": "string"
        },
        "RelationshipType": {
          "$ref": "#/definitions/RelationshipType"
        },
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "ParentId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Path": {
          "description": "",
          "type": "string"
        }
      }
    },
    "Severity": {
      "title": "Severity",
      "example": "Error",
      "x-enum-elements": [
        {
          "name": "Error",
          "description": ""
        },
        {
          "name": "Warning",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Error",
        "Warning"
      ]
    },
    "MapIssueModel": {
      "title": "MapIssueModel",
      "type": "object",
      "properties": {
        "TargetFieldName": {
          "description": "",
          "type": "string"
        },
        "Severity": {
          "$ref": "#/definitions/Severity"
        },
        "BlockId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ValidationFormulaModel": {
      "title": "ValidationFormulaModel",
      "type": "object",
      "properties": {
        "BlockId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "TargetFieldDataType": {
          "description": "",
          "type": "string"
        },
        "Formula": {
          "description": "",
          "type": "string"
        },
        "Path": {
          "description": "",
          "type": "string"
        }
      }
    },
    "FormulaIssueModel": {
      "title": "FormulaIssueModel",
      "type": "object",
      "properties": {
        "Severity": {
          "$ref": "#/definitions/Severity"
        },
        "BlockId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ValidationResult": {
      "title": "ValidationResult",
      "type": "object"
    },
    "NativeQueryTestModel": {
      "title": "NativeQueryTestModel",
      "type": "object",
      "properties": {
        "ConnectionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "BlockId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Text": {
          "description": "",
          "type": "string"
        }
      }
    },
    "NativeQueryResultModel": {
      "title": "NativeQueryResultModel",
      "type": "object",
      "properties": {
        "Error": {
          "description": "",
          "type": "string"
        },
        "Fields": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PropertyModel"
          }
        }
      }
    },
    "MarketplaceConnectorDetail": {
      "title": "MarketplaceConnectorDetail",
      "type": "object",
      "properties": {
        "AdapterTypeId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "AgentInstallStatuses": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MarketplaceAgentInstallStatus"
          }
        },
        "CertificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ContactUrl": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "Installed": {
          "description": "",
          "type": "boolean"
        },
        "IsAssociated": {
          "description": "",
          "type": "boolean"
        },
        "IsFree": {
          "description": "",
          "type": "boolean"
        },
        "IsISSource": {
          "description": "",
          "type": "boolean"
        },
        "IsISTarget": {
          "description": "",
          "type": "boolean"
        },
        "IsMSSource": {
          "description": "",
          "type": "boolean"
        },
        "IsMSTarget": {
          "description": "",
          "type": "boolean"
        },
        "IsPublic": {
          "description": "",
          "type": "boolean"
        },
        "IsRSSource": {
          "description": "",
          "type": "boolean"
        },
        "IsRSTarget": {
          "description": "",
          "type": "boolean"
        },
        "Link": {
          "description": "",
          "type": "string"
        },
        "Logo": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LogoUrl": {
          "description": "",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "ProviderName": {
          "description": "",
          "type": "string"
        },
        "RequiresJava": {
          "description": "",
          "type": "boolean"
        },
        "SupportsCloudAgents": {
          "description": "",
          "type": "boolean"
        },
        "ConnectorUpdateVersions": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConnectorUpdateVersionModel"
          }
        }
      }
    },
    "Status70": {
      "title": "Status70",
      "example": "SendingCommandToTheAgent",
      "x-enum-elements": [
        {
          "name": "SendingCommandToTheAgent",
          "description": ""
        },
        {
          "name": "AgentRecievedCommand",
          "description": ""
        },
        {
          "name": "AgentDownloadingConnectorUpdate",
          "description": ""
        },
        {
          "name": "AgentServiceRestarting",
          "description": ""
        },
        {
          "name": "InstallFailed",
          "description": ""
        },
        {
          "name": "InstallTimedOut",
          "description": ""
        },
        {
          "name": "Installed",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "SendingCommandToTheAgent",
        "AgentRecievedCommand",
        "AgentDownloadingConnectorUpdate",
        "AgentServiceRestarting",
        "InstallFailed",
        "InstallTimedOut",
        "Installed"
      ]
    },
    "MarketplaceAgentInstallStatus": {
      "title": "MarketplaceAgentInstallStatus",
      "type": "object",
      "properties": {
        "AgentId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "AgentName": {
          "description": "",
          "type": "string"
        },
        "Status": {
          "$ref": "#/definitions/Status70"
        }
      }
    },
    "ConnectorUpdateVersionModel": {
      "title": "ConnectorUpdateVersionModel",
      "type": "object",
      "properties": {
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "Version": {
          "description": "",
          "type": "string"
        },
        "IsHotFix": {
          "description": "",
          "type": "boolean"
        },
        "IsLocked": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "Role": {
      "title": "Role",
      "example": "User",
      "x-enum-elements": [
        {
          "name": "User",
          "description": ""
        },
        {
          "name": "Administrator",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "User",
        "Administrator"
      ]
    },
    "OrgUserModel": {
      "title": "OrgUserModel",
      "type": "object",
      "properties": {
        "Role": {
          "$ref": "#/definitions/Role"
        },
        "Email": {
          "description": "",
          "type": "string"
        },
        "FirstName": {
          "description": "",
          "type": "string"
        },
        "LastName": {
          "description": "",
          "type": "string"
        },
        "PendingInvitation": {
          "description": "",
          "type": "boolean"
        }
      },
      "required": [
        "Role"
      ]
    },
    "TenantRole": {
      "title": "TenantRole",
      "example": "None",
      "x-enum-elements": [
        {
          "name": "None",
          "description": ""
        },
        {
          "name": "User",
          "description": ""
        },
        {
          "name": "Administrator",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "None",
        "User",
        "Administrator"
      ]
    },
    "OrganizationModel": {
      "title": "OrganizationModel",
      "type": "object",
      "properties": {
        "id": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "name": {
          "description": "",
          "type": "string"
        },
        "administrators": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parentId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "tenantType": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "website": {
          "description": "",
          "type": "string"
        },
        "street": {
          "description": "",
          "type": "string"
        },
        "city": {
          "description": "",
          "type": "string"
        },
        "state": {
          "description": "",
          "type": "string"
        },
        "postalCode": {
          "description": "",
          "type": "string"
        },
        "country": {
          "description": "",
          "type": "string"
        },
        "primaryContactFirstName": {
          "description": "",
          "type": "string"
        },
        "primaryContactLastName": {
          "description": "",
          "type": "string"
        },
        "primaryContactEmail": {
          "description": "",
          "type": "string"
        },
        "primaryContactPhoneNumber": {
          "description": "",
          "type": "string"
        },
        "primaryContactStreet": {
          "description": "",
          "type": "string"
        },
        "primaryContactCity": {
          "description": "",
          "type": "string"
        },
        "primaryContactState": {
          "description": "",
          "type": "string"
        },
        "primaryContactPostalCode": {
          "description": "",
          "type": "string"
        },
        "primaryContactCountry": {
          "description": "",
          "type": "string"
        },
        "isSourceDataLocal": {
          "description": "",
          "type": "boolean"
        },
       
        "apiToken": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "isAgentLogDownloadAllowed": {
          "description": "",
          "type": "boolean"
        },
        "tenantRole": {
          "$ref": "#/definitions/TenantRole"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "solutionStatusErrors": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dataCenterId": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "dataCenterName": {
          "description": "",
          "type": "string"
        },
        "dataCenterLocation": {
          "description": "",
          "type": "string"
        },
         "securityRules": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrganizationSecurityRuleModel"
          }
        }
      }
    },
    "OrganizationSecurityRuleModel": {
      "title": "OrganizationSecurityRuleModel",
      "type": "object",
      "properties": {
        "Name": {
          "description": "",
          "type": "string"
        },
        "AllowedIpRangeStartAddress": {
          "description": "",
          "type": "string"
        },
        "AllowedIpRangeEndAddress": {
          "description": "",
          "type": "string"
        },
        "ApiAccessEnabled": {
          "description": "",
          "type": "boolean"
        },
        "EventSolutionAccessEnabled": {
          "description": "",
          "type": "boolean"
        },
        "id": {
          "description": "The GUID / UUID",
          "type": "string"
        }
      },
      "required": [
        "Name",
        "AllowedIpRangeStartAddress",
        "AllowedIpRangeEndAddress"
      ]
    },
    "FunctionModel": {
      "title": "FunctionModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "CategoryName": {
          "description": "",
          "type": "string"
        },
        "Prototype": {
          "description": "",
          "type": "string"
        },
        "LastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "DescriptionUrl": {
          "description": "",
          "type": "string"
        }
      }
    },
    "SettingModel": {
      "title": "SettingModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "ValueType": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "StringValue": {
          "description": "",
          "type": "string"
        },
        "DecimalValue": {
          "description": "",
          "type": "number",
          "format": "double"
        },
        "BlobValue": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "GetSecuritySettingModel": {
      "title": "GetSecuritySettingModel",
      "type": "object",
      "properties": {
        "APICryptoToken": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "EventSolutionAccessToken": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "IsSourceDataLocal": {
          "description": "",
          "type": "boolean"
        },
        "IsAgentLogDownloadAllowed": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "SetSecuritySettingModel": {
      "title": "SetSecuritySettingModel",
      "type": "object",
      "properties": {
        "IsSourceDataLocal": {
          "description": "",
          "type": "boolean"
        },
        "IsAgentLogDownloadAllowed": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "State": {
      "title": "state",
      "example": "Complete",
      "x-enum-elements": [
        {
          "name": "Complete",
          "description": ""
        },
        {
          "name": "Incomplete",
          "description": ""
        },
        {
          "name": "Disabled",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Complete",
        "Incomplete",
        "Disabled"
      ]
    },
    "MessageEndpointModel": {
      "title": "MessageEndpointModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "url": {
          "description": "",
          "type": "string"
        },
        "solutionName": {
          "description": "",
          "type": "string"
        },
        "mapName": {
          "description": "",
          "type": "string"
        },
        "mapDescription": {
          "description": "",
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/State"
        },
        "entityName": {
          "description": "",
          "type": "string"
        },
        "messageCount": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "createDateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "lastModificationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "solutionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "processDefinitionId": {
          "description": "The GUID / UUID",
          "type": "string"
        }
      }
    },
    "RegisterModel": {
      "title": "RegisterModel",
      "description": "The register model.",
      "type": "object",
      "properties": {
        "OrgName": {
          "description": "The Organization name",
          "type": "string"
        },
        "UserId": {
          "description": "The user Id",
          "type": "string"
        },
        "Connectors": {
          "description": "list of connector ids to install",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "OrgId": {
          "description": "The Organization Id.",
          "type": "integer",
          "format": "int32"
        },
        "SubscriptionSkus": {
          "description": "list of subscriptions to assign",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionSku"
          }
        },
        "SecurityRules": {
          "description": "The security rules that are applied once this organization is created.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SecurityRule"
          }
        },
        "DataCenterId": {
          "description": "This property holds the DataCenter Id that will be associated to the Organization. If it is ommitted we will choose the first DataCenter which will be in the United States.",
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "OrgName",
        "UserId"
      ]
    },
    "SubscriptionSku": {
      "title": "SubscriptionSku",
      "description": "Specification for assigning a sku to an organization",
      "type": "object",
      "properties": {
        "Sku": {
          "description": "The SKU of a subscription",
          "type": "string"
        },
        "StartDate": {
          "description": "The start date of a subscription.",
          "type": "string",
          "format": "date-time"
        },
        "ExpirationDate": {
          "description": "The experation date of a subscription.",
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "Sku"
      ]
    },
    "SecurityRule": {
      "title": "SecurityRule",
      "description": "Specification for assigning a security rule to an organization.",
      "type": "object",
      "properties": {
        "Name": {
          "description": "",
          "type": "string"
        },
        "ApiAccessEnabled": {
          "description": "",
          "type": "boolean"
        },
        "EventSolutionAccessEnabled": {
          "description": "",
          "type": "boolean"
        },
        "AllowedIpRangeStartAddress": {
          "description": "",
          "type": "string"
        },
        "AllowedIpRangeEndAddress": {
          "description": "",
          "type": "string"
        }
      },
      "required": [
        "Name",
        "ApiAccessEnabled",
        "EventSolutionAccessEnabled",
        "AllowedIpRangeStartAddress",
        "AllowedIpRangeEndAddress"
      ]
    },
    "Status87": {
      "title": "Status87",
      "example": "Disabled",
      "x-enum-elements": [
        {
          "name": "Disabled",
          "description": ""
        },
        {
          "name": "Idle",
          "description": ""
        },
        {
          "name": "IdleLastRunRowErrors",
          "description": ""
        },
        {
          "name": "IdleLastRunFailed",
          "description": ""
        },
        {
          "name": "InProgress",
          "description": ""
        },
        {
          "name": "Preparing",
          "description": ""
        },
        {
          "name": "Provisioning",
          "description": ""
        },
        {
          "name": "ProvisionError",
          "description": ""
        },
        {
          "name": "Starting",
          "description": ""
        },
        {
          "name": "Incomplete",
          "description": ""
        },
        {
          "name": "Stopping",
          "description": ""
        },
        {
          "name": "OnDemand",
          "description": ""
        },
        {
          "name": "OnDemandLastRunFailed",
          "description": ""
        },
        {
          "name": "OnDemandLastRunRowErrors",
          "description": ""
        },
        {
          "name": "AgentUpdating",
          "description": ""
        },
        {
          "name": "AgentShutdown",
          "description": ""
        },
        {
          "name": "AgentHeartbeatLate",
          "description": ""
        },
        {
          "name": "AgentHeartbeatFailed",
          "description": ""
        },
        {
          "name": "WaitingForEvent",
          "description": ""
        },
        {
          "name": "WaitingToUpdateAgent",
          "description": ""
        },
        {
          "name": "WaitingToUpdateConnector",
          "description": ""
        },
        {
          "name": "UpdatingConnector",
          "description": ""
        },
        {
          "name": "WaitingToRestartAgentUserRequest",
          "description": ""
        },
        {
          "name": "WaitingToRestartAgentMemoryLimit",
          "description": ""
        },
        {
          "name": "AgentRestarting",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Disabled",
        "Idle",
        "IdleLastRunRowErrors",
        "IdleLastRunFailed",
        "InProgress",
        "Preparing",
        "Provisioning",
        "ProvisionError",
        "Starting",
        "Incomplete",
        "Stopping",
        "OnDemand",
        "OnDemandLastRunFailed",
        "OnDemandLastRunRowErrors",
        "AgentUpdating",
        "AgentShutdown",
        "AgentHeartbeatLate",
        "AgentHeartbeatFailed",
        "WaitingForEvent",
        "WaitingToUpdateAgent",
        "WaitingToUpdateConnector",
        "UpdatingConnector",
        "WaitingToRestartAgentUserRequest",
        "WaitingToRestartAgentMemoryLimit",
        "AgentRestarting"
      ]
    },
    "SolutionModel": {
      "title": "SolutionModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "AgentId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "ConnectionIdForSource": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "ConnectionIdForTarget": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "SolutionType": {
          "$ref": "#/definitions/SolutionType"
        },
        "Status": {
          "$ref": "#/definitions/Status87"
        },
        "InProgressStartTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "LastRunTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "NextRunTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "MapLinks": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MapLinkModel"
          }
        },
        "IsDisabled": {
          "description": "",
          "type": "boolean"
        },
        "ReasonDisabled": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "MinAgentVersion": {
          "description": "",
          "type": "string"
        },
        "ModificationBy": {
          "description": "",
          "type": "string"
        },
        "ReplicationSettings": {
          "$ref": "#/definitions/RSEntitySelection"
        }
      }
    },
    "SelectionType": {
      "title": "SelectionType",
      "example": "Recommended",
      "x-enum-elements": [
        {
          "name": "Recommended",
          "description": ""
        },
        {
          "name": "All",
          "description": ""
        },
        {
          "name": "Selected",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Recommended",
        "All",
        "Selected"
      ]
    },
    "RSEntitySelection": {
      "title": "RSEntitySelection",
      "type": "object",
      "properties": {
        "SelectionType": {
          "$ref": "#/definitions/SelectionType"
        },
        "Entities": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "SolutionConnectionModel": {
      "title": "SolutionConnectionModel",
      "type": "object",
      "properties": {
        "ConnectionName": {
          "description": "",
          "type": "string"
        },
        "ConnectionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "ConnectorName": {
          "description": "",
          "type": "string"
        },
        "ConnectorId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "ConnectorLogoUrl": {
          "description": "",
          "type": "string"
        }
      }
    },
    "ScheduleOption": {
      "title": "ScheduleOption",
      "example": "OnDemand",
      "x-enum-elements": [
        {
          "name": "OnDemand",
          "description": ""
        },
        {
          "name": "RunOnce",
          "description": ""
        },
        {
          "name": "Recurring",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "OnDemand",
        "RunOnce",
        "Recurring"
      ]
    },
    "SolutionScheduleModel": {
      "title": "SolutionScheduleModel",
      "type": "object",
      "properties": {
        "ScheduleOption": {
          "$ref": "#/definitions/ScheduleOption"
        },
        "SolutionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "RunOnceOptions": {
          "$ref": "#/definitions/RunOnceModel"
        },
        "RecurringOptions": {
          "$ref": "#/definitions/RecurringModel"
        }
      }
    },
    "RunOnceModel": {
      "title": "RunOnceModel",
      "type": "object",
      "properties": {
        "DateTime": {
          "description": "",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "RecurringModel": {
      "title": "RecurringModel",
      "type": "object",
      "properties": {
        "Days": {
          "$ref": "#/definitions/RecurringDaysModel"
        },
        "Times": {
          "$ref": "#/definitions/RecurringTimesModel"
        },
        "TimeZone": {
          "description": "",
          "type": "string"
        }
      }
    },
    "DaysOption": {
      "title": "DaysOption",
      "example": "DaysInterval",
      "x-enum-elements": [
        {
          "name": "DaysInterval",
          "description": ""
        },
        {
          "name": "DaysOfWeek",
          "description": ""
        },
        {
          "name": "DaysOfMonth",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "DaysInterval",
        "DaysOfWeek",
        "DaysOfMonth"
      ]
    },
    "RecurringDaysModel": {
      "title": "RecurringDaysModel",
      "type": "object",
      "properties": {
        "DaysOption": {
          "$ref": "#/definitions/DaysOption"
        },
        "DaysIntervalStartDate": {
          "description": "",
          "type": "string"
        },
        "DaysInterval": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "DaysOfMonth": {
          "description": "",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "DaysOfWeek": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LastDayOfMonth": {
          "description": "",
          "type": "boolean"
        }
      }
    },
    "TimeOption": {
      "title": "TimeOption",
      "example": "TimeOfDay",
      "x-enum-elements": [
        {
          "name": "TimeOfDay",
          "description": ""
        },
        {
          "name": "HourlyMinutes",
          "description": ""
        },
        {
          "name": "TimeInterval",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "TimeOfDay",
        "HourlyMinutes",
        "TimeInterval"
      ]
    },
    "TimeIntervalUnit": {
      "title": "TimeIntervalUnit",
      "example": "None",
      "x-enum-elements": [
        {
          "name": "None",
          "description": ""
        },
        {
          "name": "Minutes",
          "description": ""
        },
        {
          "name": "Hours",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "None",
        "Minutes",
        "Hours"
      ]
    },
    "RecurringTimesModel": {
      "title": "RecurringTimesModel",
      "type": "object",
      "properties": {
        "TimeOption": {
          "$ref": "#/definitions/TimeOption"
        },
        "HourlyMinutes": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "TimeOfDay": {
          "description": "",
          "type": "string"
        },
        "TimeInterval": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "TimeIntervalUnit": {
          "$ref": "#/definitions/TimeIntervalUnit"
        }
      }
    },
    "SolutionPrepareModel": {
      "title": "SolutionPrepareModel",
      "type": "object",
      "properties": {
        "CreationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "HasError": {
          "description": "",
          "type": "boolean"
        },
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "IsComplete": {
          "description": "",
          "type": "boolean"
        },
        "Message": {
          "description": "",
          "type": "string"
        },
        "SolutionId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "MapId": {
          "description": "",
          "type": "integer",
          "format": "int64"
        },
        "mapErrorModels": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MapErrorModel"
          }
        }
      }
    },
    "MapErrorModel": {
      "title": "MapErrorModel",
      "type": "object",
      "properties": {
        "MapName": {
          "description": "",
          "type": "string"
        },
        "Message": {
          "description": "",
          "type": "string"
        }
      }
    },
    "SubscriptionModel": {
      "title": "SubscriptionModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "Name": {
          "description": "",
          "type": "string"
        },
        "Description": {
          "description": "",
          "type": "string"
        },
        "OrgId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "IsTrial": {
          "description": "",
          "type": "boolean"
        },
        "StartDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "ExpirationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "RecordsAllowed": {
          "description": "",
          "type": "string"
        },
        "RecordsProcessed": {
          "description": "",
          "type": "string"
        },
        "MonthlyUsage": {
          "description": "",
          "type": "array",
          "items": {
            "$ref": "#/definitions/MonthlyUsage"
          }
        }
      }
    },
    "MonthlyUsage": {
      "title": "MonthlyUsage",
      "type": "object",
      "properties": {
        "Date": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "RecordsProcessed": {
          "description": "",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "UserModel": {
      "title": "UserModel",
      "description": "The user model.",
      "type": "object",
      "properties": {
        "Email": {
          "description": "Gets or sets the email.",
          "type": "string"
        },
        "FirstName": {
          "description": "Gets or sets the first name.",
          "type": "string"
        },
        "LastName": {
          "description": "Gets or sets the last name.",
          "type": "string"
        },
        "UnderPostDefaults": {
          "$ref": "#/definitions/IUserDetail"
        },
        "OmittedFields": {
          "description": "",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Company": {
          "description": "Gets or sets the company.",
          "type": "string"
        },
        "Country": {
          "description": "Gets or sets the country.",
          "type": "string"
        },
        "HttpReferrer": {
          "description": "Gets or sets the HTTP referrer.",
          "type": "string"
        },
        "Id": {
          "description": "Gets or sets the id.",
          "type": "string"
        },
        "IsApproved": {
          "description": "Indicates if the user's email needs to be validated prior to access",
          "type": "boolean"
        },
        "JobTitle": {
          "description": "Gets or sets the job title.",
          "type": "string"
        },
        "LeadSource": {
          "description": "Gets or sets the lead source.",
          "type": "string"
        },
        "Password": {
          "description": "Gets or sets the password.",
          "type": "string"
        },
        "Phone": {
          "description": "Gets or sets the phone.",
          "type": "string"
        },
        "Address": {
          "description": "",
          "type": "string"
        },
        "City": {
          "description": "",
          "type": "string"
        },
        "State": {
          "description": "Gets or sets the state.",
          "type": "string"
        },
        "PostalCode": {
          "description": "Gets or sets the zip code.",
          "type": "string"
        }
      },
      "required": [
        "Email",
        "FirstName",
        "LastName"
      ]
    },
    "IUserDetail": {
      "title": "IUserDetail",
      "type": "object",
      "properties": {
        "Company": {
          "description": "",
          "type": "string"
        },
        "Country": {
          "description": "",
          "type": "string"
        },
        "FirstName": {
          "description": "",
          "type": "string"
        },
        "HttpReferrer": {
          "description": "",
          "type": "string"
        },
        "JobTitle": {
          "description": "",
          "type": "string"
        },
        "LastName": {
          "description": "",
          "type": "string"
        },
        "LeadSource": {
          "description": "",
          "type": "string"
        },
        "Phone": {
          "description": "",
          "type": "string"
        },
        "State": {
          "description": "",
          "type": "string"
        }
      }
    },
    "Status107": {
      "title": "Status107",
      "example": "Pending",
      "x-enum-elements": [
        {
          "name": "Pending",
          "description": ""
        },
        {
          "name": "Declined",
          "description": ""
        }
      ],
      "type": "string",
      "enum": [
        "Pending",
        "Declined"
      ]
    },
    "UserInvitationModel": {
      "title": "UserInvitationModel",
      "type": "object",
      "properties": {
        "Id": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "OrgId": {
          "description": "",
          "type": "integer",
          "format": "int32"
        },
        "OrgName": {
          "description": "",
          "type": "string"
        },
        "Sender": {
          "description": "",
          "type": "string"
        },
        "Message": {
          "description": "",
          "type": "string"
        },
        "InvitationDate": {
          "description": "",
          "type": "string",
          "format": "date-time"
        },
        "Status": {
          "$ref": "#/definitions/Status107"
        },
        "RoleType": {
          "$ref": "#/definitions/RoleType"
        }
      },
      "required": [
        "Id",
        "OrgId",
        "OrgName",
        "Sender",
        "Message",
        "InvitationDate",
        "Status",
        "RoleType"
      ]
    },
    "UserNotficationSettingsModel": {
      "title": "UserNotficationSettingsModel",
      "type": "object",
      "properties": {
        "orgName": {
          "description": "",
          "type": "string"
        },
        "tenantId": {
          "description": "The GUID / UUID",
          "type": "string"
        },
        "heartbeatEmail": {
          "description": "",
          "type": "boolean"
        },
        "failedRowsEmail": {
          "description": "",
          "type": "boolean"
        },
        "failedJobEmail": {
          "description": "",
          "type": "boolean"
        },
        "connectorActivationEmail": {
          "description": "",
          "type": "boolean"
        },
        "eventFailedJobEmail": {
          "description": "",
          "type": "boolean"
        },
        "systemUpdateEmail": {
          "description": "",
          "type": "boolean"
        }
      },
      "required": [
        "orgName",
        "tenantId"
      ]
    }
  }
}